from compiler import *
register_plugin(__name__)

from plugin_make_presentations import make_presentation,typ
from module_scenes import scenes as _scenes



def foo__lwbr_menu():
	def foo_sv_var(slot,load = [],change = []):
		load = [(troop_get_slot, l.val, trp.lwbr_sv_vars, slot),] + load
		if change != []:
			change = [(troop_get_slot, l.var, trp.lwbr_sv_vars, slot),] + change
		change += [
			(troop_get_slot, l.var, trp.lwbr_sv_vars, slot),
			(neq, l.var, l.val),
			(troop_set_slot, trp.lwbr_sv_vars, slot, l.val),
			(call_script, script.lwbr_send_event_to_server, lwbr.multiplayer_event_server,
				lwbr.sv_event.set_sv_var, slot, l.val, 0),
			]
		return (load,change)
	def foo_cl_var(slot,load = [],change = []):
		load = [(troop_get_slot, l.val, trp.lwbr_vars, slot),] + load
		if change != []:
			change = [(troop_get_slot, l.var, trp.lwbr_vars, slot),] + change
		change += [(troop_set_slot, trp.lwbr_vars, slot, l.val),]
		return (load,change)
	is_wf = [(neg|troop_slot_eq,  trp.lwbr_sv_vars, lwbr.sv_var.version, 0),]
	is_nat = [(troop_slot_eq,  trp.lwbr_sv_vars, lwbr.sv_var.version, 0),]
	is_adm = [(multiplayer_get_my_player, l.player),(player_is_admin, l.player),]
	is_adm_wf = is_wf + is_adm
	lwbr_menu_list = [
		(typ.text,"LWBR WarForge menu v%d.%d"%(lwbr.mod_version/1000,lwbr.mod_version%1000),[]),
		(typ.blank,),
		(typ.text,"Server is not running LWBR WarForge",is_nat),
		(typ.text,"Server is running LWBR WarForge v{reg0}.{reg1}",is_wf + [
				(troop_get_slot,l.version,trp.lwbr_sv_vars,lwbr.sv_var.version),
				(store_div,reg0,l.version,1000),
				(store_mod,reg1,l.version,1000),
			]),
		(typ.open_container,400,350),
		(typ.checkbox,"Dmg report:") + foo_cl_var(lwbr.var.dmg_report),
		(typ.checkbox,"Keep selected items:") + foo_cl_var(lwbr.var.keep_items),
		(typ.button,"Set Hotkeys",is_wf,[
				(presentation_set_duration, 0),
				(start_presentation,prsnt.lwbr_set_hotkeys),
				]),
		(typ.code,[(try_begin),]+is_adm_wf),
		(typ.blank,),
		(typ.text,"Admin options:",[]),
		(typ.button,"Admin Text",[],[
				(presentation_set_duration, 0),
				(start_presentation,prsnt.lwbr_admin_chat),
				]),
		(typ.button,"Admin Cheats",[],[
				(presentation_set_duration, 0),
				(start_presentation,prsnt.lwbr_admin_cheats),
				]),
		(typ.button,"Customize Maplist",[],[
				(presentation_set_duration, 0),
				(start_presentation,prsnt.lwbr_customize_maplist),
				]),
		(typ.checkbox,"Firearms:") + foo_sv_var(lwbr.sv_var.firearms_en),
		(typ.checkbox,"Horses:") + foo_sv_var(lwbr.sv_var.horses_en),
		(typ.checkbox,"Peasants:") + foo_sv_var(lwbr.sv_var.peasants_en),
		(typ.checkbox,"Persistant Stats:") + foo_sv_var(lwbr.sv_var.persistant_stats),
		(typ.checkbox,"Jump from horse:") + foo_sv_var(lwbr.sv_var.horse_jump),
		(typ.checkbox,"Taunting:") + foo_sv_var(lwbr.sv_var.taunt),
		(typ.checkbox,"Cheering:") + foo_sv_var(lwbr.sv_var.cheer),
		(typ.checkbox,"Only one FREE weapon:") + foo_sv_var(lwbr.sv_var.free_wpn),
		(typ.numbox,"Min Version required:") + foo_sv_var(lwbr.sv_var.min_version) + (-1,lwbr.mod_version+1),
		(typ.numbox,"Messages interval(seconds):") + foo_sv_var(lwbr.sv_var.msg_cd) + (0,1001),
		(typ.numbox,"Team 1 damage received(%):") + foo_sv_var(lwbr.sv_var.t1_dmg_r) + (0,1001),
		(typ.numbox,"Team 1 damage dealt(%):") + foo_sv_var(lwbr.sv_var.t1_dmg_d) + (0,1001),
		(typ.numbox,"Team 2 damage received(%):") + foo_sv_var(lwbr.sv_var.t2_dmg_r) + (0,1001),
		(typ.numbox,"Team 2 damage dealt(%):") + foo_sv_var(lwbr.sv_var.t2_dmg_d) + (0,1001),
		]
	for pack in lwbr.packs:
		lo = [(val_and, l.val, lwbr.packages[pack]),]
		ch = [
			# (assign, reg0, l.var),
			(try_begin),
				(eq,l.val,0),
				(store_and, l.val, l.var, lwbr.packages['-' + pack]),
				# (assign, reg1, lwbr.packages['-' + pack]),
				# (assign, reg2, l.val),
				# (display_message, "@pack %s, {reg0} & {reg1} = {reg2}" % pack),
			(else_try),
				(store_or, l.val, l.var, lwbr.packages[pack]),
				# (assign, reg1, lwbr.packages[pack]),
				# (assign, reg2, l.val),
				# (display_message, "@pack %s, {reg0} | {reg1} = {reg2}" % pack),
			(try_end),
			# (call_script, script.lwbr_give_items_to_troops, l.val),
			]
		lwbr_menu_list += [(typ.checkbox,pack + " Items:") + foo_sv_var(lwbr.sv_var.items,load = lo,change = ch),]
	lwbr_menu_list += [
		(typ.combo_button,"Weather:") + foo_sv_var(lwbr.sv_var.weather_config) + ([
				"Based on Map",
				"Clear Sky",
				"Rainy",
				"Snowy",
				],),
		(typ.combo_button,"Time:") + foo_sv_var(lwbr.sv_var.time_config) + ([
				"Random",
				"Random - No night",
				"Dawn",
				"Noon",
				"Dusk",
				"Midnight",
				],),
		(typ.combo_button,"Fog:") + foo_sv_var(lwbr.sv_var.fog_config) + ([
				"Based on Map",
				"None",
				"Sparse",
				"Thick",
				"Random",
				],),
		(typ.code,[(try_end),]),
		(typ.close_container,),
		(typ.button,"Done",[],[(presentation_set_duration,0)]),
		]

	# print "lwbr_menu_list"
	# for i in lwbr_menu_list:
	# 	print i[:2],"["
	# 	for j in i[2]:
	# 		print "		",j
	# 	print "	],["
	# 	for j in i[3]:
	# 		print "		",j
	# 	print "	]"

	return lwbr_menu_list

def foo__lwbr_init_vars():
	return [(troop_set_slot, trp.lwbr_vars, var, lwbr.var.default[var]) for var in lwbr.var.default]

def foo__lwbr_init_sv_vars(is_server = False):
	if is_server:
		return [(troop_set_slot, trp.lwbr_sv_vars, var, lwbr.sv_var.default_sv[var]) for var in lwbr.sv_var.default_sv]
	else:
		return [(troop_set_slot, trp.lwbr_sv_vars, var, lwbr.sv_var.default[var]) for var in lwbr.sv_var.default]

def foo__lwbr_init_player():
	return [(player_set_slot, l.player_no, slot, lwbr.slot_player.default[slot]) for slot in lwbr.slot_player.default]

def foo__lwbr_init_troop():
	return [(troop_set_slot, l.troop, slot, lwbr.slot_troop.default[slot]) for slot in lwbr.slot_troop.default]

def foo__lwbr_init_scene():
	return [(scene_set_slot, l.scene, slot, lwbr.slot_scene.default[slot]) for slot in lwbr.slot_scene.default]

def foo__lwbr_init_scenes():
	body = [(try_for_range, l.scene, 0, len(_scenes)),] + foo__lwbr_init_scene() + [(try_end),]
	for opt in lwbr.scenes_opt:
		for scene in opt[0]:
			for option in opt[1]:
				body += [(scene_set_slot, l.scene, option, lwbr.slot_scene.default[option])]
	return ("lwbr_init_scenes",body)

def foo__server_ask_player_info():
	return [
		(display_message, "@asking info from player"),
		(call_script, script.lwbr_send_event_to_player, l.player_no, lwbr.multiplayer_event_client,
			lwbr.cl_event.ask_var, lwbr.var.version, 0, 0, 1),
		]

def foo__server_send_player_info():
	body = [ (display_message, "@sending info to player"), ]
	for var in lwbr.sv_var.default:
		body += [
			(troop_get_slot, l.val, trp.lwbr_sv_vars, var),
			(call_script, script.lwbr_send_event_to_player, l.player_no, lwbr.multiplayer_event_client,
				lwbr.cl_event.return_sv_var, var, l.val, 0, 1),
			]
	return body

def foo__debug_vars():
	ret = []
	if lwbr.debug_mode > 0:
		v = sorted([(vars(lwbr.var)[f],f) for f in vars(lwbr.var) if not f.startswith("__") and not f in ("default","count")])
		for var in v:
			ret += [
				(troop_get_slot, reg0, trp.lwbr_vars, var[0]),
				(display_message, "@var %s = {reg0}" % var[1]),
			]
		v = sorted([(vars(lwbr.sv_var)[f],f) for f in vars(lwbr.sv_var) if not f.startswith("__") and not f in ("default","default_sv","count")])
		for var in v:
			ret += [
				(troop_get_slot, reg0, trp.lwbr_sv_vars, var[0]),
				(display_message, "@sv var %s = {reg0}" % var[1]),
			]
	return ret

def foo__add_rnd_itp(troop, itp_type, cnt, ek, player):
	foo = [
		(try_begin),
			(gt, cnt, 0),
			(store_random_in_range, l.rnd, 0, cnt),
			(try_for_troop_items, l.itm, troop),
				(item_get_type, l.type, l.itm),
				(eq, l.type, itp_type),
				(try_begin),
					(eq, l.rnd, 0),
	] + lwbr.debug([
					(str_store_item_name, s0, l.itm),
					(str_store_player_username, s1, player),
					(display_message,"@Adding itm.{s0} to player {s1}"),
	]) + [
					(player_add_spawn_item, player, ek, l.itm),
					(try_for_troop_items_break),
				(try_end),
				(val_sub, l.rnd, 1),
			(try_end),
		(try_end),
	]
	return foo

presentations = [
	make_presentation("lwbr_menu", prsntf_manual_end_only, 0, foo__lwbr_menu()),
	("lwbr_admin_cheats", prsntf_manual_end_only, 0, []),
	("lwbr_customize_maplist", prsntf_manual_end_only, 0, []),
	("lwbr_admin_chat", prsntf_manual_end_only, 0, []),
	("lwbr_set_hotkeys", prsntf_manual_end_only, 0, []),
]

scripts = [
	#script.lwbr_init_item_slots
	("lwbr_init_item_slots", lwbr.debug_func("lwbr_init_item_slots") + [
			(try_for_range, l.item, all_items_begin, all_items_end),
				(item_set_slot, l.item, slot_item_multiplayer_item_class, 0),
				(item_get_type, l.type, l.item),
				(try_begin),
					(eq,l.type,itp_type_one_handed_wpn),

					(item_get_thrust_damage, l.dmg, l.item),
					(item_get_swing_damage_type, l.dmg_type, l.item),
					(try_begin),
						(eq, l.dmg_type, blunt),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_blunt),
					(else_try),
						(gt, l.dmg, 0),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_sword),
					(else_try),
						(item_has_property, l.item, itp_bonus_against_shield),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_axe),
					(else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_cleavers),
					(try_end),
					#multi_item_class_type_war_picks
				(else_try),
					(eq,l.type,itp_type_two_handed_wpn),
					(try_begin),
						(item_has_property, l.item, itp_bonus_against_shield),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_axe),
					(else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_polearm),
					(try_begin),
						(item_has_property, l.item, itp_bonus_against_shield),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_axe),
					(else_try),
					# 	(item_has_property, l.item, itp_couchable),
					# 	(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_lance),
					# (else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_spear),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_shield),
					# (item_get_shield_height, l.h, l.item),
					(try_begin),
					# 	(gt, l.h, 100),
					# 	(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_large_shield),
					# (else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_bow),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_bow),
				(else_try),
					(eq,l.type,itp_type_crossbow),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
				(else_try),
					(eq,l.type,itp_type_arrows),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_arrow),
				(else_try),
					(eq,l.type,itp_type_bolts),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_bolt),
				(else_try),
					(eq,l.type,itp_type_thrown),
					(try_begin),
					# 	(item_has_property, l.item, itp_bonus_against_shield),
					# 	(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_throwing_axe),
					# (else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_throwing),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_head_armor),
					(item_get_head_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 25),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_helm),
					(else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_body_armor),
					(item_get_body_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 40),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_armor),
					(else_try),
						(gt, l.armor, 25),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_medium_armor),
					(else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_foot_armor),
					(item_get_leg_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 25),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_foot),
					(else_try),
						(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_hand_armor),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_glove),
				(else_try),
					(eq,l.type,itp_type_horse),
					(item_set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_horse),
				(try_end),
			(try_end),
			inject('lwbr_inject_init_item_slots'),
			]),
	#script.lwbr_init_vars
	("lwbr_init_vars", lwbr.debug_func("lwbr_init_vars") + [
			(try_begin),
				(eq, 	g.lwbr_vars_initialized,	0),
				(assign,g.lwbr_vars_initialized,	1),
				inject("lwbr_inject_init_vars_once"),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				inject("lwbr_inject_init_vars_server"),
			(else_try),
				inject("lwbr_inject_init_vars_client"),
			(try_end),
			inject("lwbr_inject_init_vars"),
			]),
	#script.lwbr_init_weather
	("lwbr_init_weather",[]),
	#script.lwbr_init_scenes
	foo__lwbr_init_scenes(),
	#script.lwbr_show_msg_players
	("lwbr_show_msg_players",[
			(try_begin),
				(multiplayer_is_server),
				(store_script_param,l.str,1),
				] + lwbr.debug_func("lwbr_show_msg_players", [l.str]) + [
				(call_script, script.lwbr_send_str_to_players, multiplayer_event_show_server_message, l.str),
			(try_end),
			]),
	#script.lwbr_send_str_to_players
	("lwbr_send_str_to_players",[
			(try_begin),
				(multiplayer_is_server),
				(store_script_param,l.event_type,1),
				(store_script_param,l.str,2),
				] + lwbr.debug_func("lwbr_send_str_to_players", [l.event_type, l.str]) + [
				(try_for_players, l.player),
					(player_is_active, l.player),
					(multiplayer_send_string_to_player, l.player, l.event_type, l.str),
				(try_end),
			(try_end),
			]),
	#script.lwbr_send_str_to_server
	("lwbr_send_str_to_server",[
			(store_script_param,l.event_type,1),
			(store_script_param,l.str,2),
			] + lwbr.debug_func("lwbr_send_str_to_server", [l.event_type, l.str]) + [
			(try_begin),
				(neg|multiplayer_is_server),
				(multiplayer_send_string_to_server, l.event_type, s1),
			(else_try),
				(multiplayer_get_my_player, l.player),
				(str_store_string_reg, s0, l.str),
				(call_script, script.game_receive_network_message, l.player, l.event_type),
			(try_end),
			]),
	#script.lwbr_send_event_to_players
	("lwbr_send_event_to_players",[
			(store_script_param,l.event_type,1),
			(store_script_param,l.par1,2),
			(store_script_param,l.par2,3),
			(store_script_param,l.par3,4),
			(store_script_param,l.par4,5),
			(try_begin),
				(multiplayer_is_server),
				] + lwbr.debug_func("lwbr_send_event_to_players", [l.event_type, l.par1, l.par2, l.par3, l.par4]) + [
				(try_for_players, l.player),
					(player_is_active, l.player),
					(call_script, script.lwbr_send_event_to_player, l.player, l.event_type,
						l.par1, l.par2, l.par3, l.par4, 0),
				(try_end),
			(try_end),
			]),
	#script.lwbr_send_event_to_player
	("lwbr_send_event_to_player",[
			(store_script_param,l.player,1),
			(store_script_param,l.event_type,2),
			(store_script_param,l.par1,3),
			(store_script_param,l.par2,4),
			(store_script_param,l.par3,5),
			(store_script_param,l.par4,6),
			(store_script_param,l.force,7),
			(try_begin),
				(multiplayer_is_server),
				] + lwbr.debug_func("lwbr_send_event_to_player", [l.player, l.event_type, l.par1, l.par2, l.par3, l.par4, l.force]) + [
				(try_begin),
					(neg|multiplayer_is_dedicated_server),
					(multiplayer_get_my_player, l.me),
					(eq,l.player,l.me),
					(call_script, script.game_receive_network_message, l.me, l.event_type,
						l.par1, l.par2, l.par3, l.par4),
				(else_try),
					(this_or_next|eq, l.force, 1),
					(player_is_active, l.player),
					(multiplayer_send_4_int_to_player, l.player, l.event_type,
						l.par1, l.par2, l.par3, l.par4),
				(try_end),
			(try_end),
			]),
	#script.lwbr_send_event_to_server
	("lwbr_send_event_to_server",[
			(store_script_param,l.event_type,1),
			(store_script_param,l.par1,2),
			(store_script_param,l.par2,3),
			(store_script_param,l.par3,4),
			(store_script_param,l.par4,5),
			] + lwbr.debug_func("lwbr_send_event_to_server", [l.event_type, l.par1, l.par2, l.par3, l.par4]) + [
			(try_begin),
				(neg|multiplayer_is_server),
				(multiplayer_send_4_int_to_server, l.event_type, l.par1, l.par2, l.par3, l.par4),
			(else_try),
				(multiplayer_get_my_player, l.player),
				(call_script, script.game_receive_network_message, l.player, l.event_type, l.par1, l.par2, l.par3, l.par4),
			(try_end),
			]),
	#script.lwbr_get_key_name
	("lwbr_get_key_name",[
			(store_script_param_1,l.key),
			(try_begin),
				(eq,l.key,-1),
				(str_store_string,s1,"@Disabled"),
			(else_try),
				(eq,l.key,key_1),
				(str_store_string,s1,"@1"),
			(else_try),
				(eq,l.key,key_2),
				(str_store_string,s1,"@2"),
			(else_try),
				(eq,l.key,key_3),
				(str_store_string,s1,"@3"),
			(else_try),
				(eq,l.key,key_4),
				(str_store_string,s1,"@4"),
			(else_try),
				(eq,l.key,key_5),
				(str_store_string,s1,"@5"),
			(else_try),
				(eq,l.key,key_6),
				(str_store_string,s1,"@6"),
			(else_try),
				(eq,l.key,key_7),
				(str_store_string,s1,"@7"),
			(else_try),
				(eq,l.key,key_8),
				(str_store_string,s1,"@8"),
			(else_try),
				(eq,l.key,key_9),
				(str_store_string,s1,"@9"),
			(else_try),
				(eq,l.key,key_0),
				(str_store_string,s1,"@0"),
			(else_try),
				(eq,l.key,key_a),
				(str_store_string,s1,"@A"),
			(else_try),
				(eq,l.key,key_b),
				(str_store_string,s1,"@B"),
			(else_try),
				(eq,l.key,key_c),
				(str_store_string,s1,"@C"),
			(else_try),
				(eq,l.key,key_d),
				(str_store_string,s1,"@D"),
			(else_try),
				(eq,l.key,key_e),
				(str_store_string,s1,"@E"),
			(else_try),
				(eq,l.key,key_f),
				(str_store_string,s1,"@F"),
			(else_try),
				(eq,l.key,key_g),
				(str_store_string,s1,"@G"),
			(else_try),
				(eq,l.key,key_h),
				(str_store_string,s1,"@H"),
			(else_try),
				(eq,l.key,key_i),
				(str_store_string,s1,"@I"),
			(else_try),
				(eq,l.key,key_j),
				(str_store_string,s1,"@J"),
			(else_try),
				(eq,l.key,key_k),
				(str_store_string,s1,"@K"),
			(else_try),
				(eq,l.key,key_l),
				(str_store_string,s1,"@L"),
			(else_try),
				(eq,l.key,key_m),
				(str_store_string,s1,"@M"),
			(else_try),
				(eq,l.key,key_n),
				(str_store_string,s1,"@N"),
			(else_try),
				(eq,l.key,key_o),
				(str_store_string,s1,"@O"),
			(else_try),
				(eq,l.key,key_p),
				(str_store_string,s1,"@P"),
			(else_try),
				(eq,l.key,key_q),
				(str_store_string,s1,"@Q"),
			(else_try),
				(eq,l.key,key_r),
				(str_store_string,s1,"@R"),
			(else_try),
				(eq,l.key,key_s),
				(str_store_string,s1,"@S"),
			(else_try),
				(eq,l.key,key_t),
				(str_store_string,s1,"@T"),
			(else_try),
				(eq,l.key,key_u),
				(str_store_string,s1,"@U"),
			(else_try),
				(eq,l.key,key_v),
				(str_store_string,s1,"@V"),
			(else_try),
				(eq,l.key,key_w),
				(str_store_string,s1,"@W"),
			(else_try),
				(eq,l.key,key_x),
				(str_store_string,s1,"@X"),
			(else_try),
				(eq,l.key,key_y),
				(str_store_string,s1,"@Y"),
			(else_try),
				(eq,l.key,key_z),
				(str_store_string,s1,"@Z"),
			(else_try),
				(eq,l.key,key_numpad_0),
				(str_store_string,s1,"@Numpad 0"),
			(else_try),
				(eq,l.key,key_numpad_1),
				(str_store_string,s1,"@Numpad 1"),
			(else_try),
				(eq,l.key,key_numpad_2),
				(str_store_string,s1,"@Numpad 2"),
			(else_try),
				(eq,l.key,key_numpad_3),
				(str_store_string,s1,"@Numpad 3"),
			(else_try),
				(eq,l.key,key_numpad_4),
				(str_store_string,s1,"@Numpad 4"),
			(else_try),
				(eq,l.key,key_numpad_5),
				(str_store_string,s1,"@Numpad 5"),
			(else_try),
				(eq,l.key,key_numpad_6),
				(str_store_string,s1,"@Numpad 6"),
			(else_try),
				(eq,l.key,key_numpad_7),
				(str_store_string,s1,"@Numpad 7"),
			(else_try),
				(eq,l.key,key_numpad_8),
				(str_store_string,s1,"@Numpad 8"),
			(else_try),
				(eq,l.key,key_numpad_9),
				(str_store_string,s1,"@Numpad 9"),
			(else_try),
				(eq,l.key,key_num_lock),
				(str_store_string,s1,"@Num Lock"),
			(else_try),
				(eq,l.key,key_numpad_slash),
				(str_store_string,s1,"@Numpad /"),
			(else_try),
				(eq,l.key,key_numpad_multiply),
				(str_store_string,s1,"@Numpad *"),
			(else_try),
				(eq,l.key,key_numpad_minus),
				(str_store_string,s1,"@Numpad -"),
			(else_try),
				(eq,l.key,key_numpad_plus),
				(str_store_string,s1,"@Numpad +"),
			(else_try),
				(eq,l.key,key_numpad_enter),
				(str_store_string,s1,"@Numpad Enter"),
			(else_try),
				(eq,l.key,key_numpad_period),
				(str_store_string,s1,"@Numpad ."),
			(else_try),
				(eq,l.key,key_insert),
				(str_store_string,s1,"@Insert"),
			(else_try),
				(eq,l.key,key_delete),
				(str_store_string,s1,"@Delete"),
			(else_try),
				(eq,l.key,key_home),
				(str_store_string,s1,"@Home"),
			(else_try),
				(eq,l.key,key_end),
				(str_store_string,s1,"@End"),
			(else_try),
				(eq,l.key,key_page_up),
				(str_store_string,s1,"@Pg Up"),
			(else_try),
				(eq,l.key,key_page_down),
				(str_store_string,s1,"@Pg Down"),
			(else_try),
				(eq,l.key,key_up),
				(str_store_string,s1,"@Up Arrow"),
			(else_try),
				(eq,l.key,key_down),
				(str_store_string,s1,"@Down Arrow"),
			(else_try),
				(eq,l.key,key_left),
				(str_store_string,s1,"@Left Arrow"),
			(else_try),
				(eq,l.key,key_right),
				(str_store_string,s1,"@Right Arrow"),
			(else_try),
				(eq,l.key,key_f1),
				(str_store_string,s1,"@F1"),
			(else_try),
				(eq,l.key,key_f2),
				(str_store_string,s1,"@F2"),
			(else_try),
				(eq,l.key,key_f3),
				(str_store_string,s1,"@F3"),
			(else_try),
				(eq,l.key,key_f4),
				(str_store_string,s1,"@F4"),
			(else_try),
				(eq,l.key,key_f5),
				(str_store_string,s1,"@F5"),
			(else_try),
				(eq,l.key,key_f6),
				(str_store_string,s1,"@F6"),
			(else_try),
				(eq,l.key,key_f7),
				(str_store_string,s1,"@F7"),
			(else_try),
				(eq,l.key,key_f8),
				(str_store_string,s1,"@F8"),
			(else_try),
				(eq,l.key,key_f9),
				(str_store_string,s1,"@F9"),
			(else_try),
				(eq,l.key,key_f10),
				(str_store_string,s1,"@F10"),
			(else_try),
				(eq,l.key,key_f11),
				(str_store_string,s1,"@F11"),
			(else_try),
				(eq,l.key,key_f12),
				(str_store_string,s1,"@F12"),
			(else_try),
				(eq,l.key,key_space),
				(str_store_string,s1,"@Spacebar"),
			(else_try),
				(eq,l.key,key_escape),
				(str_store_string,s1,"@Esc"),
			(else_try),
				(eq,l.key,key_enter),
				(str_store_string,s1,"@Enter"),
			(else_try),
				(eq,l.key,key_tab),
				(str_store_string,s1,"@Tab"),
			(else_try),
				(eq,l.key,key_back_space),
				(str_store_string,s1,"@Backspace"),
			(else_try),
				(eq,l.key,key_open_braces),
				(str_store_string,s1,"@ [ "),
			(else_try),
				(eq,l.key,key_close_braces),
				(str_store_string,s1,"@ ] "),
			(else_try),
				(eq,l.key,key_comma),
				(str_store_string,s1,"@ , "),
			(else_try),
				(eq,l.key,key_period),
				(str_store_string,s1,"@ . "),
			(else_try),
				(eq,l.key,key_slash),
				(str_store_string,s1,"@ / "),
			(else_try),
				(eq,l.key,key_back_slash),
				(str_store_string,s1,"@ \ "),
			(else_try),
				(eq,l.key,key_equals),
				(str_store_string,s1,"@ = "),
			(else_try),
				(eq,l.key,key_minus),
				(str_store_string,s1,"@ - "),
			(else_try),
				(eq,l.key,key_semicolon),
				(str_store_string,s1,"@ ; "),
			(else_try),
				(eq,l.key,key_apostrophe),
				(str_store_string,s1,"@ ' "),
			(else_try),
				(eq,l.key,key_tilde),
				(str_store_string,s1,"@ ~ "),
			(else_try),
				(eq,l.key,key_caps_lock),
				(str_store_string,s1,"@Caps Lock"),
			(else_try),
				(eq,l.key,key_left_shift),
				(str_store_string,s1,"@Left Shift"),
			(else_try),
				(eq,l.key,key_right_shift),
				(str_store_string,s1,"@Right Shift"),
			(else_try),
				(eq,l.key,key_left_control),
				(str_store_string,s1,"@Left Cntrl"),
			(else_try),
				(eq,l.key,key_right_control),
				(str_store_string,s1,"@Right Cntrl"),
			(else_try),
				(eq,l.key,key_left_alt),
				(str_store_string,s1,"@Left Alt"),
			(else_try),
				(eq,l.key,key_right_alt),
				(str_store_string,s1,"@Right Alt"),
			(else_try),
				(eq,l.key,key_left_mouse_button),
				(str_store_string,s1,"@Left Mouse Button"),
			(else_try),
				(eq,l.key,key_right_mouse_button),
				(str_store_string,s1,"@Right Mouse Button"),
			(else_try),
				(eq,l.key,key_middle_mouse_button),
				(str_store_string,s1,"@Middle Mouse Button"),
			(else_try),
				(eq,l.key,key_mouse_button_4),
				(str_store_string,s1,"@Mouse Button 4"),
			(else_try),
				(eq,l.key,key_mouse_button_5),
				(str_store_string,s1,"@Mouse Button 5"),
			(else_try),
				(eq,l.key,key_mouse_button_6),
				(str_store_string,s1,"@Mouse Button 6"),
			(else_try),
				(eq,l.key,key_mouse_button_7),
				(str_store_string,s1,"@Mouse Button 7"),
			(else_try),
				(eq,l.key,key_mouse_button_8),
				(str_store_string,s1,"@Mouse Button 8"),
			(else_try),
				(eq,l.key,key_mouse_scroll_up),
				(str_store_string,s1,"@Mouse Scroll Up"),
			(else_try),
				(eq,l.key,key_mouse_scroll_down),
				(str_store_string,s1,"@Mouse Scroll Down"),
			(else_try),
				(eq,l.key,key_xbox_a),
				(str_store_string,s1,"@xBox A"),
			(else_try),
				(eq,l.key,key_xbox_b),
				(str_store_string,s1,"@xBox B"),
			(else_try),
				(eq,l.key,key_xbox_x),
				(str_store_string,s1,"@xBox X"),
			(else_try),
				(eq,l.key,key_xbox_y),
				(str_store_string,s1,"@xBox Y"),
			(else_try),
				(eq,l.key,key_xbox_dpad_up),
				(str_store_string,s1,"@xBox dPad Up"),
			(else_try),
				(eq,l.key,key_xbox_dpad_down),
				(str_store_string,s1,"@xBox dPad Down"),
			(else_try),
				(eq,l.key,key_xbox_dpad_right),
				(str_store_string,s1,"@xBox dPad Right"),
			(else_try),
				(eq,l.key,key_xbox_dpad_left),
				(str_store_string,s1,"@xBox dPad Left"),
			(else_try),
				(eq,l.key,key_xbox_start),
				(str_store_string,s1,"@xBox Start"),
			(else_try),
				(eq,l.key,key_xbox_back),
				(str_store_string,s1,"@xBox Back"),
			(else_try),
				(eq,l.key,key_xbox_rbumper),
				(str_store_string,s1,"@xBox Right Bumper"),
			(else_try),
				(eq,l.key,key_xbox_lbumper),
				(str_store_string,s1,"@xBox Left Bumper "),
			(else_try),
				(eq,l.key,key_xbox_ltrigger),
				(str_store_string,s1,"@xBox Right Trigger"),
			(else_try),
				(eq,l.key,key_xbox_rtrigger),
				(str_store_string,s1,"@xBox Left Trigger"),
			(else_try),
				(eq,l.key,key_xbox_rstick),
				(str_store_string,s1,"@xBox Right Stick"),
			(else_try),
				(eq,l.key,key_xbox_lstick),
				(str_store_string,s1,"@xBox Left Stick"),
			(try_end),
			]),
	#script.lwbr_knock_down_from_horse
	("lwbr_knock_down_from_horse",[
			(store_script_param_1,l.agent_no),
			(try_begin),
				(agent_is_active,l.agent_no),
				(agent_get_horse,l.horse,l.agent_no),
				(agent_is_active,l.horse),
				(agent_start_running_away,l.horse),
				(agent_stop_running_away,l.horse),
				(store_agent_hit_points, l.hp, l.agent_no, 1),
				(store_random_in_range, l.dmg, 4, 15),#4-14 dmg
				(val_sub, l.hp, l.dmg),
				(val_max, l.hp, 1),
				(agent_set_hit_points, l.agent_no, l.hp, 1),
				(agent_deliver_damage_to_agent,l.horse,l.agent_no,1),
				(store_random_in_range,l.anim,"anim_rider_fall_right","anim_strike_chest_front_stop"),
				(try_begin),
					(agent_get_player_id,l.player_no, l.agent_no),
					(agent_is_active,l.agent_no),
					(assign,reg1,l.anim),
					(str_store_player_username, s1, l.player_no),
					(str_store_string, s1, "@Player {s1} fell from horse with anim = {reg1}."),
					(server_add_message_to_log, s1),
				(try_end),
				(try_begin),
					(gt, lwbr.debug_mode, 1),
					(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message, "@Falling anim is {reg1}."),
				(try_end),
				(agent_set_animation,l.agent_no,l.anim, 0),
				(agent_set_animation,l.agent_no,l.anim, 1),
			(try_end),
			]),
	#script.lwbr_taunt
	("lwbr_taunt",[
			(store_script_param_1,l.agent_no),
			(store_script_param_2,l.taunt),
			(try_begin),
				(agent_is_active, l.agent_no),
				(agent_get_player_id, l.player_no, l.agent_no),
				(player_is_active, l.player_no),
				(agent_is_alive, l.agent_no),
				(agent_get_animation,l.anim, l.agent_no, 0),
				(try_begin),
					(eq,l.anim, "anim_stand_man"),
					(eq,l.taunt, 0),
					(agent_set_animation,l.agent_no,"anim_cheer_stand", 1),
				(else_try),
					(eq,l.taunt, 0),
					(agent_set_animation,l.agent_no,"anim_cheer", 1),
				(try_end),
				(try_begin),
					(player_get_gender, l.gender, l.player_no),
					(eq, l.gender, 1),#female
					(try_begin),
						# (eq,l.taunt, 0),
						(str_store_string, s2, "@cheer"),
						(assign, l.sound, "snd_woman_yell"),
					# (else_try),
					# 	(str_store_string, s2, "@taunt"),
					# 	(store_random_in_range, l.sound, "snd_woman_die", "snd_hide"),
					(try_end),
				(else_try),
					(try_begin),
						(eq,l.taunt, 0),
						(str_store_string, s2, "@cheer"),
						(assign, l.sound, "snd_man_warcry"),
					(else_try),
						(str_store_string, s2, "@taunt"),
						(store_random_in_range, l.sound, "snd_man_warcry", "snd_encounter_nobleman"),
					(try_end),
				(try_end),
				(agent_play_sound, l.agent_no, l.sound),

				(assign,reg1,l.sound),
				(assign,reg2,l.anim),
				(str_store_player_username, s1, l.player_no),
				(str_store_string, s1, "@Player {s1} {s2}ed with sound = {reg1}."),
				(server_add_message_to_log, s1),
				(try_begin),
					(eq, lwbr.debug_mode, 1),
					(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message, "@{s2} sound is {reg1} and anim is {reg2}"),
				(try_end),
			(try_end),
			]),
	#script.lwbr_drop_shield ##TODO
	# ("lwbr_drop_shield",[
			# #(store_script_param_1,l.agent_no),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(agent_get_player_id, l.player_no, l.agent_no),
			# 	#(player_is_active, l.player_no),
			# 	#(agent_is_alive, l.agent_no),
			# 	#(str_store_player_username, s1, l.player_no),
			# 	#(try_begin),
			# 		#(agent_get_wielded_item, l.shield, l.agent_no, 1),
			# 		#(neq, l.shield, -1),
			# 		#(item_get_type, l.type, l.shield),
			# 		#(eq, l.type, itp_type_shield),
			# 		###TODO: drop shield
			# 		#(str_store_string, s1, "@Player dropped his shield."),
			# 		#(server_add_message_to_log, s1),
			# 	#(try_end),
			# 	#(try_begin),
			# 		#(eq, lwbr.debug_mode, 1),
			# 		#(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message, "@{s2} sound is {reg1} and anim is {reg2}"),
			# 	#(try_end),
			# #(try_end),
			# ]),
	#script.lwbr_crouch ##TODO
	# ("lwbr_crouch",[
			# #(store_script_param_1,l.agent_no),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(neg|agent_is_non_player, l.agent_no),
			# 	#(agent_get_player_id, l.player_no, l.agent_no),
			# 	#(player_is_active, l.player_no),
			# 	#(agent_is_alive, l.agent_no),
			# 	#(agent_get_horse, l.horse, l.agent_no),
			# 	#(str_store_player_username, s1, l.player_no),
			# 	##(agent_get_crouch_mode, reg1, l.agent_no),
			# 	#(try_begin),
			# 		##(eq, reg1, 0),
			# 		##(agent_set_crouch_mode, l.agent_no, 1),
			# 		#(agent_slot_eq, l.agent_no, slot_agent_crouch, 0),
			# 		#(agent_set_animation, l.agent_no, "anim_stand_to_crouch", 0),
			# 		#(agent_set_slot, l.agent_no, slot_agent_crouch, 1),
			# 		#(str_store_string, s1, "@CROUCH TEST: Player {s1} crouched."),
			# 		#(server_add_message_to_log, s1),
			# 	#(else_try),
			# 		##(agent_set_crouch_mode, l.agent_no, 0),
			# 		#(agent_slot_eq, l.agent_no, slot_agent_crouch, 1),
			# 		##(agent_set_animation, l.agent_no, "anim_crouch_to_stand", 0),
			# 		#(agent_set_slot, l.agent_no, slot_agent_crouch, 0),
			# 		#(str_store_string, s1, "@CROUCH TEST: Player {s1} stood up."),
			# 		#(server_add_message_to_log, s1),
			# 	#(try_end),
			# 	#(try_begin),
			# 		#(eq, lwbr.debug_mode, 1),
			# 		#(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message, "@DEBUG: You just {reg20?stood up:crouched}."),
			# 	#(try_end),
			# #(try_end),
			# ]),
	#script.lwbr_get_crouch_anim ##TODO
	# ("lwbr_get_crouch_anim",[
			# #(store_script_param_1,l.agent_no),
			# #(assign, l.anim, "anim_crouch_unarmed"),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(agent_is_human, l.agent_no),
			# 	#(agent_get_wielded_item, l.item, l.agent_no),
			# 	#(try_begin),
			# 		#(ge, l.item, 0),
			# 		#(item_get_type, l.item_type, l.item),
			# 		#(try_begin),
			# 			#(eq, l.item_type, itp_type_one_handed_wpn),
			# 			#(assign, l.anim, "anim_crouch_single"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_two_handed_wpn),
			# 			#(assign, l.anim, "anim_crouch_greatsword"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_polearm),
			# 			#(assign, l.anim, "anim_crouch_staff"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_crossbow),
			# 			#(assign, l.anim, "anim_crouch_crossbow"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_pistol),
			# 			#(assign, l.anim, "anim_crouch_ready_pistol"),
			# 		#(try_end),
			# 	#(try_end),
			# #(try_end),
			# #(assign, reg0, l.anim),
			# ]),
	#script.lwbr_server_start
	("lwbr_server_start",[
			# (str_store_string, s1, "@Storing troop stats"),
			# (server_add_message_to_log, s1),
			# (call_script, "script_lwbr_store_troop_stats_all"),
			# (str_store_string, s1, "@Troop stats stored"),
			# (server_add_message_to_log, s1),
			# (call_script, "script_lwbr_give_items_to_troops", lwbr_new_items_default),
			# (str_store_string, s1, "@Items added"),
			# (server_add_message_to_log, s1),
			(try_begin),
				(multiplayer_is_server),
				(neq, g.lwbr_started_sv, 1),
				(assign, g.lwbr_started_sv, 1),
			] + lwbr.debug([(display_message, "@running script lwbr_server_start"),]) + [
				(call_script, script.lwbr_init_vars),
				(call_script, script.lwbr_init_scenes),
				(call_script, script.lwbr_init_weather),
				(call_script, script.lwbr_init_item_slots),
				(try_begin),
					(neg|multiplayer_is_dedicated_server),
					#
				(try_end),
			(try_end),
			]),
	#script.lwbr_player_start
	("lwbr_player_start",[
			(try_begin),
				(neg|multiplayer_is_server),
				(neq, g.lwbr_started_cl, 1),
				(assign, g.lwbr_started_cl, 1),
			] + lwbr.debug([(display_message, "@running script lwbr_player_start"),]) + [
				(call_script, script.lwbr_init_vars),
				(call_script, script.lwbr_init_scenes),
				(call_script, script.lwbr_init_weather),
				(call_script, script.lwbr_init_item_slots),
			(try_end),
			]),
	#script.lwbr_quit_server
	# ("lwbr_quit_server",[
			# (set_rain, 0, 0),
			# (scene_set_day_time, 12),
			# (set_fog_distance, 10000),
			# (call_script,"script_lwbr_initialize_variables"),
			# ]),
	#script.lwbr_store_troop_stats_all
	# ("lwbr_store_troop_stats_all",[
			# (try_for_range, l.troop, "trp_swadian_crossbowman_multiplayer", "trp_multiplayer_end"),
			# 	(call_script, "script_lwbr_store_troop_stats", l.troop),
			# (try_end),
			# ]),
	#script.lwbr_store_troop_stats
	# ("lwbr_store_troop_stats",[
			# (store_script_param_1, l.troop),
			# #
			# (try_for_range, l.slot, slot_troop_stats_begin, slot_troop_stats_end),
			# 	(store_sub, l.value, l.slot, slot_troop_stats_begin),
			# 	(store_attribute_level, l.value2, l.troop, l.value),
			# 	(troop_set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} stat '{reg1}' default is {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_proficiences_begin, slot_troop_proficiences_end),
			# 	(store_sub, l.value, l.slot, slot_troop_proficiences_begin),
			# 	(store_proficiency_level, l.value2, l.troop, l.value),
			# 	(troop_set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} proficience '{reg1}' default is {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_skills_begin, slot_troop_skills_end),
			# 	(store_sub, l.value, l.slot, slot_troop_skills_begin),
			# 	(store_skill_level, l.value2, l.value, l.troop),
			# 	(troop_set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} skill '{reg1}' default is {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# ]),
	#script.lwbr_restore_troop_stats_all
	# ("lwbr_restore_troop_stats_all",[
			# (try_for_range, l.troop, "trp_swadian_crossbowman_multiplayer", "trp_multiplayer_end"),
			# 	(call_script, "script_lwbr_restore_troop_stats", l.troop),
			# (try_end),
			# ]),
	#script.lwbr_restore_troop_stats
	# ("lwbr_restore_troop_stats",[
			# (store_script_param_1, l.troop),
			# #
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 	(str_store_troop_name, s1, l.troop),
			# 	(str_store_string, s1, "@Restoring '{s1}' stats"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_stats_begin, slot_troop_stats_end),
			# 	(store_sub, l.value, l.slot, slot_troop_stats_begin),
			# 	(troop_get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, "script_lwbr_set_troop_attribute_level", l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_proficiences_begin, slot_troop_proficiences_end),
			# 	(store_sub, l.value, l.slot, slot_troop_proficiences_begin),
			# 	(troop_get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, "script_lwbr_set_troop_wpn_proficience_level", l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_skills_begin, slot_troop_skills_end),
			# 	(store_sub, l.value, l.slot, slot_troop_skills_begin),
			# 	(troop_get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, "script_lwbr_set_troop_skill_level", l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 	(str_store_troop_name, s1, l.troop),
			# 	(str_store_string, s1, "@'{s1}' stats restored"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# #
			# ]),
	#script.lwbr_set_troop_skill_level
	# ("lwbr_set_troop_skill_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.skill, 2),
			# (store_script_param, l.skl_lvl, 3),
			# (try_begin),
			# 	(store_skill_level,l.old_lvl,l.skill,l.troop),
			# 	(neq, l.skl_lvl, l.old_lvl),
			# 	(val_sub, l.skl_lvl, l.old_lvl),
			# 	(troop_raise_skill,l.troop,l.skill,l.skl_lvl),
			# 	(store_skill_level,l.new_lvl,l.skill,l.troop),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.skill),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} skill '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_skills_level
	# ("lwbr_set_troop_all_skills_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.skl_lvl, 2),
			# (try_for_range, l.skill, 0, len(skills)),
			# 	(call_script, "script_lwbr_set_troop_skill_level", l.troop, l.skill, l.skl_lvl),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_attribute_level
	# ("lwbr_set_troop_attribute_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.attribute, 2),
			# (store_script_param, l.attribute_lvl, 3),
			# (try_begin),
			# 	(store_attribute_level,l.old_lvl,l.troop,l.attribute),
			# 	(neq, l.attribute_lvl, l.old_lvl),
			# 	(val_sub, l.attribute_lvl, l.old_lvl),
			# 	(troop_raise_attribute_linear,l.troop,l.attribute,l.attribute_lvl),
			# 	(store_attribute_level,l.new_lvl,l.troop,l.attribute),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.attribute),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} attribute '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_attributes_level
	# ("lwbr_set_troop_all_attributes_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.attribute_lvl, 2),
			# (try_for_range, l.attribute, 0, 4),
			# 	(call_script, "script_lwbr_set_troop_attribute_level", l.troop, l.attribute, l.attribute_lvl),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_wpn_proficience_level
	# ("lwbr_set_troop_wpn_proficience_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.proficience, 2),
			# (store_script_param, l.proficience_lvl, 3),
			# (store_proficiency_level,l.old_lvl,l.troop,l.proficience),
			# (try_begin),
			# 	(neq, l.proficience_lvl, l.old_lvl),
			# 	(val_sub, l.proficience_lvl, l.old_lvl),
			# 	(troop_raise_proficiency_linear,l.troop,l.proficience,l.proficience_lvl),
			# 	(store_proficiency_level,l.new_lvl,l.troop,l.proficience),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, "trp_swadian_crossbowman_multiplayer"),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.proficience),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} proficience '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, "script_lwbr_send_msg_to_all_players"),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_wpn_proficiences_level
	# ("lwbr_set_troop_all_wpn_proficiences_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.proficience_lvl, 2),
			# (try_for_range, l.proficience, 0, 4),
			# 	(call_script, "script_lwbr_set_troop_wpn_proficience_level", l.troop, l.proficience, l.proficience_lvl),
			# (try_end),
			# ]),
	#script.lwbr_force_change_weapons
	("lwbr_force_change_weapons",[
			(multiplayer_get_my_player, l.player_no),
			(call_script, script.multiplayer_clear_player_selected_items, l.player_no),
			(player_get_troop_id, l.troop_no, l.player_no),
			(try_for_range, l.slot_no, lwbr.slot_troop.sel_head, lwbr.slot_troop.sel_wpn4+1),
				(troop_set_slot, l.troop_no, l.slot_no, -2),
			(try_end),
			]),
	#script.lwbr_change_troop_stats_if_needed
	# ("lwbr_change_troop_stats_if_needed",[
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(str_store_string, s1, "@Restoring troop stats"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# (call_script, "script_lwbr_restore_troop_stats_all"),
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(str_store_string, s1, "@Troop stats restored"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# (try_begin),
			# 	(eq, "$g_lwbr_new_items", lwbr_new_items__peasant_items),
			# 	(try_for_range, l.troop, multiplayer_troops_begin, multiplayer_troops_end),
			# 		(call_script, "script_lwbr_set_troop_all_attributes_level", l.troop, 10),
			# 		(call_script, "script_lwbr_set_troop_all_wpn_proficiences_level", l.troop, 50),
			# 		(call_script, "script_lwbr_set_troop_all_skills_level", l.troop, 0),
			# 	(try_end),
			# (else_try),
			# 	(eq, "$g_lwbr_new_items", lwbr_new_items__arena_items),
			# 	(try_for_range, l.troop, multiplayer_troops_begin, multiplayer_troops_end),
			# 		(call_script, "script_lwbr_set_troop_all_attributes_level", l.troop, 20),
			# 		(call_script, "script_lwbr_set_troop_all_wpn_proficiences_level", l.troop, 125),
			# 		(call_script, "script_lwbr_set_troop_all_skills_level", l.troop, 5),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_get_mt_name_from_slot
	("lwbr_get_mt_name_from_slot",[
			(store_script_param, l.slot, 1),
			(store_add, l.val, l.slot, multiplayer_game_type_deathmatch - lwbr.slot_scene.available_dm),
			(call_script, "script_game_get_mission_template_name", l.val),
			]),
	#script.lwbr_add_rnd_itm_of_type
	("lwbr_add_rnd_itm_of_type",[
			(store_script_param, l.trp, 1),
			(store_script_param, l.itp, 2),
			(store_script_param, l.cnt, 3),
			(store_script_param, l.ek,  4),
			(store_script_param, l.pl,  5),
			] + foo__add_rnd_itp(l.trp, l.itp, l.cnt, l.ek, l.pl) ),
]

troops = [
	["lwbr_vars","{!}lwbr_vars","{!}lwbr_vars", 0, 0, 0, fac.kingdom_1, [], 0, 0, 0, 0, 0],
	["lwbr_sv_vars","{!}lwbr_sv_vars","{!}lwbr_sv_vars", 0, 0, 0, fac.kingdom_1, [], 0, 0, 0, 0, 0],
]

injection = {
	'lwbr_inject_init_player_slots' : [
		(player_set_slot, l.player_no, lwbr.slot_player.version, 0),
		],
	'lwbr_inject_init_vars' : foo__lwbr_init_vars() + [
		(troop_get_slot, l.itms, trp.lwbr_sv_vars, lwbr.sv_var.items),
		(call_script, script.lwbr_give_items_to_troops, l.itms),
		],
	'lwbr_inject_init_vars_once' : [
		#set hotkeys to default
		],
	'lwbr_inject_init_vars_client' : foo__lwbr_init_sv_vars(is_server = False) + [
		#
		],
	'lwbr_inject_init_vars_server' : foo__lwbr_init_sv_vars(is_server = True) + [
		#
		],
	'lwbr_inject_escape_presentation_load' : [
		(create_button_overlay, g.lwbr_open_menu_overlay, "@LWBR WarForge menu"),
		(overlay_set_color, g.lwbr_open_menu_overlay, 0xFFFFFF),
		(overlay_set_pos, g.lwbr_open_menu_overlay, 10, 10),
		] + foo__debug_vars(),
	'lwbr_inject_escape_presentation_state_change' : [
		(else_try),
			(eq, l.object, g.lwbr_open_menu_overlay),
			(presentation_set_duration, 0),
			(start_presentation, prsnt.lwbr_menu),
		],
	'lwbr_inject_events' : [
		(else_try),
			] + lwbr.debug_func("game_receive_network_message", [l.player_no, l.event_type]) + [
			(assign, l.done, 0),
			(try_begin),
				# (eq, l.event_type, __),
				# (do_something),
				# (assign, l.done, 1),
			(try_end),
			(neq, l.done, 0),
		],
	'lwbr_inject_server_only_events' : [
		(else_try),#set_sv_var
			(eq, l.type, lwbr.sv_event.set_sv_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("sv_event.set_sv_var", [l.slot, l.val]) + [
			(try_begin),
				(try_begin),
					(neg|player_is_admin, l.player_no),
					(str_store_player_username, s0, l.player_no),
					(assign, reg0, l.slot),
					(assign, reg1, l.val),
					(display_message, "@Error: non-admin player {s0} at sv_event.set_sv_var #{reg0} -> {reg1}"),
				(else_try),
					(neg|is_between, l.slot, 0, lwbr.sv_var.count),
					(assign, reg0, l.slot),
					(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at sv_event.set_sv_var"),
				(else_try),
					(troop_set_slot, trp.lwbr_sv_vars, l.slot, l.val),
					(call_script, script.lwbr_send_event_to_players, lwbr.multiplayer_event_client,
						lwbr.cl_event.return_sv_var, l.slot, l.val, 0),
					(try_begin),
						(eq, l.slot, lwbr.sv_var.items),
						(try_begin),
							(multiplayer_is_dedicated_server),
							(call_script, script.lwbr_give_items_to_troops, l.val),
						(try_end),
						(call_script, script.lwbr_send_event_to_players, lwbr.multiplayer_event_client,
							lwbr.cl_event.clear_items, 0, 0, 0),
						(call_script, script.lwbr_send_event_to_players, multiplayer_event_force_start_team_selection,
							0, 0, 0, 0),#use this to force players to reselect items
					(else_try),
						(eq, l.slot, lwbr.sv_var.version),
					(try_end),
				(try_end),
			(try_end),
		(else_try),#ask_sv_var
			(eq, l.type, lwbr.sv_event.ask_sv_var),
			(store_script_param, l.slot, 4),
			] + lwbr.debug_func("sv_event.ask_sv_var", [l.slot]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.sv_var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at sv_event.ask_sv_var"),
			(else_try),
				(troop_get_slot, l.val, trp.lwbr_sv_vars, l.slot),
				(call_script, script.lwbr_send_event_to_player, l.player_no, lwbr.multiplayer_event_client,
					lwbr.cl_event.return_sv_var, l.slot, l.val, 0, 0),
			(try_end),
		(else_try),#return_var
			(eq, l.type, lwbr.sv_event.return_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("sv_event.return_var", [l.slot, l.val]) + [
			(try_begin),
				(eq, l.slot, lwbr.var.version),
				(player_set_slot, l.player_no, lwbr.slot_player.version, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized returned var #{reg0} at sv_event.return_var"),
			(try_end),
		(else_try),#action
			(eq, l.type, lwbr.sv_event.action),
			(store_script_param, l.action, 4),
			(try_begin),
			# 	(eq, l.action, lwbr.action.taunt.id),
			# 	...
			# (else_try),
				(assign, reg0, l.action),
				(display_message, "@Error: invalid or unrecognized action #{reg0} at sv_event.action"),
			(try_end),
		],
	'lwbr_inject_client_only_events' : [
		(else_try),#set_var
			(eq, l.type, lwbr.cl_event.set_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("cl_event.set_var", [l.slot, l.val]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized var #{reg0} at cl_event.set_var"),
			(else_try),
				(troop_set_slot, trp.lwbr_vars, l.slot, l.val),
				# (try_begin),
				# 	(eq, l.slot, lwbr.var.---),
				# 	---
				# (try_end),
			(try_end),
		(else_try),#ask_var
			(eq, l.type, lwbr.cl_event.ask_var),
			(store_script_param, l.slot, 4),
			] + lwbr.debug_func("cl_event.ask_var", [l.slot]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized var #{reg0} at cl_event.ask_var"),
			(else_try),
				(troop_get_slot, l.val, trp.lwbr_vars, l.slot),
				(call_script, script.lwbr_send_event_to_server, lwbr.multiplayer_event_server,
					lwbr.sv_event.return_var, l.slot, l.val, 0),
			(try_end),
		(else_try),#return_sv_var
			(eq, l.type, lwbr.cl_event.return_sv_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("cl_event.return_sv_var", [l.slot,l.val]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.sv_var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at cl_event.return_sv_var"),
			(else_try),
				(troop_set_slot, trp.lwbr_sv_vars, l.slot, l.val),
				(try_begin),
					(eq, l.slot, lwbr.sv_var.items),
					(call_script, script.lwbr_give_items_to_troops, l.val),
				(try_end),
			(try_end),
		(else_try),#set_faction_slot
			(eq, l.type, lwbr.cl_event.set_faction_slot),
			(store_script_param, l.faction, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_faction_slot", [l.faction, l.slot, l.slot]) + [
			(try_begin),
				# (is_between, l.faction, 0, fac.end),
				(faction_set_slot, l.faction, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid faction #{reg0} at cl_event.set_faction_slot"),
			(try_end),
		(else_try),#clear_items
			(eq, l.type, lwbr.cl_event.clear_items),
			] + lwbr.debug_func("cl_event.clear_items") + [
			(call_script, script.lwbr_force_change_weapons),
		],
	'lwbr_inject_server_before_mission_start' : [
		(call_script,script.lwbr_server_start),
		(call_script,script.lwbr_player_start),
		],
	'lwbr_inject_on_non_player_spawn' : [],
	'lwbr_inject_on_player_spawn' : [],
	'lwbr_inject_player_join' : [
		(str_store_player_username, s0, l.player_no),
		(assign, reg0, l.player_no),
		(player_get_unique_id, reg1, l.player_no),
		(try_begin),
			(player_is_admin, l.player_no),
			(display_message, "@player '{s0}' id #{reg0} uid #{reg1} joined as admin"),
		(else_try),
			(display_message, "@player '{s0}' id #{reg0} uid #{reg1} joined"),
		(try_end),
		] + foo__server_ask_player_info() + [
		(try_begin),
			(neg|multiplayer_is_dedicated_server),
			(multiplayer_get_my_player, l.me),
			(eq, l.player_no, l.me),
		(else_try),
			] + foo__server_send_player_info() + [
		(try_end),
		],
	'lwbr_inject_once_at_first_frame' : [
		(call_script,script.lwbr_server_start),
		(call_script,script.lwbr_player_start),
		],
	'lwbr_inject_mt_common' : [],
	'lwbr_inject_mt_deathmatch' : [],
	'lwbr_inject_mt_t_deathmatch' : [],
	'lwbr_inject_mt_headquarters' : [],
	'lwbr_inject_mt_capture_the_flag' : [],
	'lwbr_inject_mt_siege' : [],
	'lwbr_inject_mt_battle' : [],
	'lwbr_inject_mt_fight_and_destroy' : [],
	'lwbr_inject_mt_coop' : [],
	'lwbr_inject_mt_duel' : [],
	'lwbr_inject_buy_equipment' : [
		(troop_get_slot, l.packs, trp.lwbr_sv_vars, lwbr.sv_var.items),
		] + lwbr.debug_func("lwbr_inject_buy_equipment", [l.player_no, l.packs]) + [
		# try_begin # lwbr_buy_peasant_items
			(store_and, l.check, l.packs, lwbr.packages["Peasant"]),
			(neq, l.check, 0),
			] + lwbr.debug_func("lwbr_buy_peasant_items") + [
			(try_begin),
				(player_get_troop_id, l.trp, l.player_no),
				(gt, l.trp, 0),
				(troop_get_type_counts,l.cnt_horses,
									   l.cnt_1h,l.cnt_2h,l.cnt_pole,
									   l.cnt_arrow,l.cnt_bolt,
									   l.cnt_shield,
									   l.cnt_bow,l.cnt_xbow,l.cnt_th,
									   l.rest,
									   l.cnt_helm,l.cnt_armor,l.cnt_boots,l.cnt_gloves,
									   l.rest,l.rest,l.rest,l.rest,l.rest,
									   l.trp),
				(try_chance,80),#80%
					] + lwbr.debug_func("bought_head_armor", [l.player_no, l.cnt_helm]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_head_armor,	l.cnt_helm,  ek_head,   l.player_no),
				(try_end),
				(try_chance,90),#90%
					] + lwbr.debug_func("bought_body_armor", [l.player_no, l.cnt_armor]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_body_armor,	l.cnt_armor, ek_body,   l.player_no),
				(try_end),
				(try_chance,88),#88%
					] + lwbr.debug_func("bought_foot_armor", [l.player_no, l.cnt_boots]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_foot_armor,	l.cnt_boots, ek_foot,   l.player_no),
				(try_end),
				(try_chance,25),#25%
					] + lwbr.debug_func("bought_hand_armor", [l.player_no, l.cnt_gloves]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_hand_armor,	l.cnt_gloves,ek_gloves, l.player_no),
				(try_end),
				(try_chance,15),#15%
					] + lwbr.debug_func("bought_horse", [l.player_no, l.cnt_horses]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_horse,			l.cnt_horses,ek_horse,  l.player_no),
				(try_end),
				(try_chance,1,3),#1/3
					] + lwbr.debug_func("bought_1h", [l.player_no, l.cnt_1h]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_one_handed_wpn,l.cnt_1h,    ek_item_0, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield,		l.cnt_shield,ek_item_1, l.player_no),
				# (else_try_chance),
				# 	] + lwbr.debug_func("bought_2h", [l.player_no, l.cnt_2h]) + [
				# 	(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_two_handed_wpn,l.cnt_2h,    ek_item_0, l.player_no),
				(else_try),#2/3
					] + lwbr.debug_func("bought_pole", [l.player_no, l.cnt_pole]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_polearm,		l.cnt_pole,  ek_item_0, l.player_no),
				(try_end),
				(try_chance,90),#90%
					] + lwbr.debug_func("bought_thrown", [l.player_no, l.cnt_th]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_thrown,		l.cnt_th,    ek_item_2, l.player_no),
				(else_try_chance),#5%
					] + lwbr.debug_func("bought_bow", [l.player_no, l.cnt_bow]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_bow,			l.cnt_bow,   ek_item_2, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_arrows,		l.cnt_arrow, ek_item_3, l.player_no),
				(else_try),#5%
					] + lwbr.debug_func("bought_xbow", [l.player_no, l.cnt_xbow]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_crossbow,		l.cnt_xbow,  ek_item_2, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_bolts,			l.cnt_bolt,  ek_item_3, l.player_no),
				(try_end),
			(try_end),
		(else_try),# lwbr_buy_arena_items
			(store_and, l.check, l.packs, lwbr.packages["Arena"]),
			(neq, l.check, 0),
			] + lwbr.debug_func("lwbr_buy_arena_items") + [
			(try_begin),
				(player_get_troop_id, l.trp, l.player_no),
				(gt, l.trp, 0),
				(troop_get_type_counts,l.cnt_horses,
									   l.cnt_1h,l.cnt_2h,l.cnt_pole,
									   l.cnt_arrow,l.cnt_bolt,
									   l.cnt_shield,
									   l.cnt_bow,l.cnt_xbow,l.cnt_th,
									   l.rest,
									   l.cnt_helm,l.cnt_armor,l.cnt_boots,l.cnt_gloves,
									   l.rest,l.rest,l.rest,l.rest,l.rest,
									   l.trp),

				#add armor
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_head_armor, l.cnt_helm,  ek_head,  l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_body_armor, l.cnt_armor, ek_body,  l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_hand_armor, l.cnt_gloves,ek_gloves,l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_foot_armor, l.cnt_boots, ek_foot,  l.player_no),

				(try_begin),#horse
					(player_get_slot, l.horse, l.player_no, slot_player_selected_item_indices_begin + 8),#horse slot
					(ge, l.horse, 0),
					] + lwbr.debug_func("picked_mounted_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_horse, itm.practice_horse),
				(try_end),

				(player_get_slot, l.wpn, l.player_no, slot_player_selected_item_indices_begin),#1st wpn slot
				(assign, l.itm_type, -1),
				(assign, l.itm_class, -1),
				(try_begin),
					(ge, l.wpn, 0),
					(item_get_type, l.itm_type, l.wpn),
					(item_get_slot, l.itm_class, l.wpn, slot_item_multiplayer_item_class),
				(try_end),

				(try_begin),#lance/shield/dagger
					(eq, l.wpn, itm.practice_lance),
					] + lwbr.debug_func("picked_lancer_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_lance),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#staff/throwing dagger
					(this_or_next|eq, l.wpn, itm.practice_staff),
					(eq, l.wpn, itm.practice_throwing_daggers),
					] + lwbr.debug_func("picked_staff_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_staff),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_throwing_daggers),
				(else_try),#javelin/shield/dagger
					(eq, l.wpn, itm.practice_javelin),
					] + lwbr.debug_func("picked_javelin_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_javelin),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_dagger),
				(else_try),#bow/dagger
					(this_or_next|eq, l.itm_type, itp_type_bow),
					(eq, l.itm_type, itp_type_arrows),
					] + lwbr.debug_func("picked_bow_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_bow),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_arrows),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#xbow/dagger
					(this_or_next|eq, l.itm_type, itp_type_crossbow),
					(eq, l.itm_type, itp_type_bolts),
					] + lwbr.debug_func("picked_xbow_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_crossbow),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_bolts),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#2h
					(eq, l.itm_type, itp_type_two_handed_wpn),
					] + lwbr.debug_func("picked_2h_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.heavy_practice_sword),
				(else_try),#1h axe/shield
					(eq, l.itm_type, itp_type_one_handed_wpn),
					(eq, l.itm_class, multi_item_class_type_axe),
					] + lwbr.debug_func("picked_axe_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_axe),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
				(else_try),#1h sword/shield -> default
					# (this_or_next|eq, l.itm_type, itp_type_one_handed_wpn),
					# (eq, l.type, itp_type_shield),
					] + lwbr.debug_func("picked_1h_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_sword),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
				(try_end),
			(try_end),
		(else_try),# normal
			] + lwbr.debug_func("lwbr_buy_normal_items") + [
		# try_end
		],
}



#LWBR WarForge 2.0 --- BEGIN
#LWBR WarForge 2.0 --- END

