from compiler import *
register_plugin(__name__)

from plugin_make_presentations import make_presentation,typ



def foo__lwbr_menu():
	def foo_sv_var(slot,load = [],change = []):
		load = [ (get_lwbr_sv_var, l.val, slot), ] + load
		change  = [ (get_lwbr_sv_var, l.val_old, slot), (eq, l.val_old, l.val_old), ] + change
		change += [ (set_lwbr_sv_var, slot, l.val, lwbr.sync_to_sv), ]
		return (load,change)
	def foo_cl_var(slot,load = [],change = []):
		load = [ (get_lwbr_var, l.val, slot), ] + load
		change  = [ (get_lwbr_var, l.val_old, slot), (eq, l.val_old, l.val_old), ] + change
		change += [ (set_lwbr_var, slot, l.val), ]
		return (load,change)
	is_wf = [(neg|troop_slot_eq,  trp.lwbr_sv_vars, lwbr.sv_var.version, lwbr.native),]
	is_nat = [(troop_slot_eq,  trp.lwbr_sv_vars, lwbr.sv_var.version, lwbr.native),]
	is_adm = [(multiplayer_get_my_player, l.player),(player_is_admin, l.player),]
	is_adm_wf = is_wf + is_adm
	solo_packs = ["Arena", "Peasant"]
	lwbr_menu_list = [
		(typ.text,"LWBR WarForge menu v%.3f"%(lwbr.mod_version/1000),[]),
		(typ.blank,),
		(typ.text,"Server is not running LWBR WarForge",is_nat),
		(typ.text,"Server is running LWBR WarForge v{reg0}.{reg1}{reg2}{reg3}",is_wf + [
				(get_lwbr_sv_var,l.version,lwbr.sv_var.version),
				(store_mod, reg3, l.version, 10),
				(val_div, l.version, 10),
				(store_mod, reg2, l.version, 10),
				(val_div, l.version, 10),
				(store_mod, reg1, l.version, 10),
				(store_div, reg0, l.version, 10),
			]),
		(typ.open_container,400,350),
		# (typ.checkbox,"Dmg report:") + foo_cl_var(lwbr.var.dmg_report),
		# (typ.checkbox,"Keep selected items:") + foo_cl_var(lwbr.var.keep_items),
		# (typ.button,"Set Hotkeys",is_wf,[
				# (presentation_set_duration, 0),
				# (start_presentation,prsnt.lwbr_set_hotkeys),
				# ]),
		(typ.code,[(try_begin),]+is_adm_wf),
		(typ.blank,),
		# (typ.text,"Admin options:",[]),
		# (typ.button,"Admin Text",[],[
				# (presentation_set_duration, 0),
				# (start_presentation,prsnt.lwbr_admin_chat),
				# ]),
		# (typ.button,"Admin Cheats",[],[
				# (presentation_set_duration, 0),
				# (start_presentation,prsnt.lwbr_admin_cheats),
				# ]),
		# (typ.button,"Customize Maplist",[],[
				# (presentation_set_duration, 0),
				# (start_presentation,prsnt.lwbr_customize_maplist),
				# ]),
		# (typ.checkbox,"Firearms:") + foo_sv_var(lwbr.sv_var.firearms_en),
		# (typ.checkbox,"Horses:") + foo_sv_var(lwbr.sv_var.horses_en),
		# (typ.checkbox,"Peasants:") + foo_sv_var(lwbr.sv_var.peasants_en),
		# (typ.checkbox,"Persistant Stats:") + foo_sv_var(lwbr.sv_var.persistant_stats),
		# (typ.checkbox,"Jump from horse:") + foo_sv_var(lwbr.sv_var.horse_jump),
		# (typ.checkbox,"Taunting:") + foo_sv_var(lwbr.sv_var.taunt),
		# (typ.checkbox,"Cheering:") + foo_sv_var(lwbr.sv_var.cheer),
		# (typ.checkbox,"Only one FREE weapon:") + foo_sv_var(lwbr.sv_var.free_wpn),
		(typ.numbox,"Min Version required:") + foo_sv_var(lwbr.sv_var.min_version) + (lwbr.native,lwbr.mod_version+1),
		(typ.numbox,"Messages interval(seconds):") + foo_sv_var(lwbr.sv_var.msg_cd) + (0,1001),
		(-typ.numbox,"Messages count:") + foo_sv_var(lwbr.sv_var.msg_cnt) + (0,lwbr.msg_cnt_max+1),
		(-typ.numbox,"Editting Message:") + foo_cl_var(lwbr.var.msg_edit,[
				(get_lwbr_sv_var, l.max, lwbr.sv_var.msg_cnt),
				(ge, l.max, 2),
				]) + (1,l.max+1),
		(typ.textbox,"Message #{reg0}:",[
				(get_lwbr_sv_var, l.cnt, lwbr.sv_var.msg_cnt),
				(ge, l.cnt, 1),
				(get_lwbr_var, l.cnt, lwbr.var.msg_edit),
				(assign, reg0, l.cnt),
				(str_store_troop_name, s0, lwbr.msg_troops_begin+l.cnt-1),
				],[
				(get_lwbr_var, l.cnt, lwbr.var.msg_edit),
				(store_add, l.trp, lwbr.msg_troops_begin-1, l.cnt),
				(troop_set_name, l.trp, s0),
				(send_str_to_server, "@{s0}", lwbr.str_event.set_troop_name, l.trp, 0, 0, lwbr.silent),
				]),
			]

	lwbr_menu_list += [
		# (typ.numbox,"Team 1 damage received(%):") + foo_sv_var(lwbr.sv_var.t1_dmg_r) + (0,1001),
		# (typ.numbox,"Team 1 damage dealt(%):") + foo_sv_var(lwbr.sv_var.t1_dmg_d) + (0,1001),
		# (typ.numbox,"Team 2 damage received(%):") + foo_sv_var(lwbr.sv_var.t2_dmg_r) + (0,1001),
		# (typ.numbox,"Team 2 damage dealt(%):") + foo_sv_var(lwbr.sv_var.t2_dmg_d) + (0,1001),
		]
	for packi in xrange(len(lwbr.packs)):
		pack = lwbr.packs[packi]
		lo = [ (val_and, l.val, lwbr.packages[pack]), ]
		if pack in solo_packs:
			ch = [
				(try_begin),
					(eq, l.val,1),
					(assign, l.val, lwbr.packages[pack]),
					(store_sub, l.begin, l.obj, 2*packi),
					(store_add, l.end, l.begin, 2*len(lwbr.packs)),
					(display_message, "@packi {reg0} len(lwbr.packs) {reg1}"),
					(try_for_range, l.o, l.begin, l.end),
						(neq, l.o, l.obj),
						(overlay_set_val, l.o, 0),
					(try_end),
				(else_try),
					(assign, l.val, lwbr.sv_var.default_sv[lwbr.sv_var.items]),
					(overlay_set_val, l.obj - 2 * packi, 1),
				(try_end),
			]
		else:
			ch = [
				# (assign, reg0, l.val_old),
				(try_begin),
					(eq,l.val,0),
					(store_and, l.val, l.val_old, lwbr.packages['-' + pack]),
					# (assign, reg1, lwbr.packages['-' + pack]),
					# (assign, reg2, l.val),
					# (display_message, "@pack %s, {reg0} & {reg1} = {reg2}" % pack),
				(else_try),
					(store_or, l.val, l.val_old, lwbr.packages[pack]),
					# (assign, reg1, lwbr.packages[pack]),
					# (assign, reg2, l.val),
					# (display_message, "@pack %s, {reg0} | {reg1} = {reg2}" % pack),
			]
			for pack2i in xrange(len(lwbr.packs)):
				pack2 = lwbr.packs[pack2i]
				if pack2 in solo_packs:
					ch += [
						(overlay_set_val, l.obj + 2 * (pack2i - packi), 0),
						(val_and, l.val, lwbr.packages['-' + pack2]),
					]
			ch += [
				(try_end),
				# (call_script, script.lwbr_give_items_to_troops, l.val),
				]
		lwbr_menu_list += [(typ.checkbox,pack + " Items:") + foo_sv_var(lwbr.sv_var.items,load = lo,change = ch),]
	lwbr_menu_list += [
		(typ.combo_button,"Weather:") + foo_sv_var(lwbr.sv_var.weather_config) + ([
				"Based on Map",
				"Clear Sky",
				"Rainy",
				"Snowy",
				],),
		(typ.combo_button,"Time:") + foo_sv_var(lwbr.sv_var.time_config) + ([
				"Random",
				"Random - No night",
				"Dawn",
				"Noon",
				"Dusk",
				"Midnight",
				],),
		(typ.combo_button,"Fog:") + foo_sv_var(lwbr.sv_var.fog_config) + ([
				"Based on Map",
				"None",
				"Sparse",
				"Thick",
				"Random",
				],),
		(typ.code,[(try_end),]),
		(typ.close_container,),
		(typ.button,"Done",[],[(presentation_set_duration,0)]),
		]

	return lwbr_menu_list

def foo__debug_vars():
	v1 = sorted([(vars(lwbr.var)[f],f) for f in vars(lwbr.var)\
		if not f.startswith("__") and not f in ("default","default_once","count","start","end")])
	v2 = sorted([(vars(lwbr.sv_var)[f],f) for f in vars(lwbr.sv_var)\
		if not f.startswith("__") and not f in ("default","default_sv","count","start","end")])
	v3 = sorted([(vars(lwbr.slot_scene)[f],f) for f in vars(lwbr.slot_scene)\
		if not f.startswith("__") and not f in ("default","count","start","end")])
	return sum([[
		(get_lwbr_var, reg0, var[0]),
		(display_message, "@var %s = {reg0}" % var[1]),
		] for var in v1 ],[])\
	+ sum([[
		(get_lwbr_sv_var, reg0, var[0]),
		(display_message, "@sv var %s = {reg0}" % var[1]),
		] for var in v2 ],[])\
	+ [ (store_current_scene, l.scn), ]\
	+ sum([[
		(get_slot, reg0, l.scn, var[0]),
		(display_message, "@scene_slot %s = {reg0}" % var[1]),
		] for var in v3 ],[])


presentations = [
	make_presentation("lwbr_menu", prsntf_manual_end_only, 0, foo__lwbr_menu()),
	("lwbr_admin_cheats", prsntf_manual_end_only, 0, []),
	("lwbr_customize_maplist", prsntf_manual_end_only, 0, []),
	("lwbr_admin_chat", prsntf_manual_end_only, 0, []),
	("lwbr_set_hotkeys", prsntf_manual_end_only, 0, []),
]

scripts = [
	## INITIALIZATION ##
	#script.lwbr_server_start
	("lwbr_server_start",[
			(try_begin),
				(multiplayer_is_server),
				] + lwbr.sv_version([
					(store_script_param, l.force, 1),
					(this_or_next|eq, l.force, 1),
					(neq, g.lwbr_started_sv, 1),
					] + lwbr.debug([(display_message, "@running script lwbr_server_start"),]) + [

					(call_script, script.lwbr_all_slots_to_def, l.force),
					(try_for_range, l.scn, 0, scn.end),
						(call_script, script.lwbr_calc_weather, l.scn),
					(try_end),
					(get_lwbr_sv_var, l.itms, lwbr.sv_var.items),
					(call_script, script.lwbr_give_items_to_troops, l.itms),
					(try_for_range, l.msg, 0, lwbr.msg_cnt_max),
						(str_store_string, s0, l.msg+lwbr.msg_string_begin),
						(troop_set_name, l.msg+lwbr.msg_troops_begin, s0),
					(try_end),

					(try_begin),
						(neg|multiplayer_is_dedicated_server),
					(try_end),
					(assign, g.lwbr_started_sv, 1),
				]) + [#end lwbr.sv_version
			(try_end),
			]),
	#script.lwbr_player_start
	("lwbr_player_start",[
			(try_begin),
				(neg|multiplayer_is_server),
				] + lwbr.cl_version([
					(store_script_param, l.force, 1),
					(this_or_next|eq, l.force, 1),
					(neq, g.lwbr_started_cl, 1),
					] + lwbr.debug([(display_message, "@running script lwbr_player_start"),]) + [

					(call_script, script.lwbr_all_slots_to_def, l.force),
					(try_for_range, l.scn, 0, scn.end),
						(call_script, script.lwbr_calc_weather, l.scn),
					(try_end),
					(get_lwbr_sv_var, l.itms, lwbr.sv_var.items),
					(call_script, script.lwbr_give_items_to_troops, l.itms),

					(assign, g.lwbr_started_cl, 1),
				]) + [#end lwbr.cl_version
			(try_end),
			]),
	#script.lwbr_all_slots_to_def
	("lwbr_all_slots_to_def",[
			(store_script_param_1, l.force),
			(try_begin),
				(this_or_next|eq, l.force, 1),
				(eq, g.lwbr_slots_initialized, 0),
				] + lwbr.debug_func("lwbr_all_slots_to_def",[l.force]) + [
				#players
				(try_for_players, l.pl),
					(call_script, script.lbwr_init_player, l.pl),
				(try_end),
				#troops
				(try_for_range, l.trp, 0, trp.end),
				] + [(troop_set_slot, l.trp, slot, lwbr.slot_troop.default[slot]) for slot in lwbr.slot_troop.default] + [
				(try_end),
				#scenes
				(try_for_range, l.scn, 0, scn.end),
				] + [(scene_set_slot, l.scn, slot, lwbr.slot_scene.default[slot]) for slot in lwbr.slot_scene.default] + [
				(try_end),
				] + sum(sum([[[(set_slot, _s, _o, _os[_o]) for _o in _os] for _s in _ss] for _ss,_os in lwbr.scenes_opt],[]),[]) + [
				#items
				(call_script, script.lwbr_init_item_slots),
				#vars
				] + [(set_lwbr_var, var, lwbr.var.default[var]) for var in lwbr.var.default] + [
				(call_script, script.lbwr_init_vars_once, 0),
				#sv vars
				(try_begin),
					(multiplayer_is_server),
				] + lwbr.sv_version([(set_lwbr_sv_var, var, lwbr.sv_var.default_sv[var])\
					for var in lwbr.sv_var.default_sv]) + [
				(else_try),
				] + lwbr.cl_version([(set_lwbr_sv_var, var, lwbr.sv_var.default[var])\
					for var in lwbr.sv_var.default]) + [
				(try_end),
				(assign, g.lwbr_slots_initialized, 1),
			(try_end),
			]),
	#script.lwbr_init_item_slots
	("lwbr_init_item_slots", lwbr.debug_func("lwbr_init_item_slots") + [
			(try_for_range, l.item, 0, itm.end),
				(set_slot, l.item, slot_item_multiplayer_item_class, 0),
				(item_get_type, l.type, l.item),
				(try_begin),
					(eq,l.type,itp_type_one_handed_wpn),

					(item_get_thrust_damage,     l.dmg,      l.item),
					(item_get_swing_damage_type, l.dmg_type, l.item),
					(try_begin),
						(eq, l.dmg_type, blunt),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_blunt),
					(else_try),
						(gt, l.dmg, 0),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_sword),
					(else_try),
						(item_has_property, l.item, itp_bonus_against_shield),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_axe),
					(else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_cleavers),
					(try_end),
					#multi_item_class_type_war_picks
				(else_try),
					(eq,l.type,itp_type_two_handed_wpn),
					(try_begin),
						(item_has_property, l.item, itp_bonus_against_shield),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_axe),
					(else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_polearm),
					(try_begin),
						(item_has_property, l.item, itp_bonus_against_shield),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_two_handed_axe),
					(else_try),
					# 	(item_has_property, l.item, itp_couchable),
					# 	(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_lance),
					# (else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_spear),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_shield),
					# (item_get_shield_height, l.h, l.item),
					(try_begin),
					# 	(gt, l.h, 100),
					# 	(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_large_shield),
					# (else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_bow),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_bow),
				(else_try),
					(eq,l.type,itp_type_crossbow),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
				(else_try),
					(eq,l.type,itp_type_arrows),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_arrow),
				(else_try),
					(eq,l.type,itp_type_bolts),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_bolt),
				(else_try),
					(eq,l.type,itp_type_thrown),
					(try_begin),
					# 	(item_has_property, l.item, itp_bonus_against_shield),
					# 	(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_throwing_axe),
					# (else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_throwing),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_head_armor),
					(item_get_head_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 25),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_helm),
					(else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_body_armor),
					(item_get_body_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 40),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_armor),
					(else_try),
						(gt, l.armor, 25),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_medium_armor),
					(else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
					(try_end),
				(else_try),
					(eq, l.type, itp_type_foot_armor),
					(item_get_leg_armor, l.armor, l.item),
					(try_begin),
						(gt, l.armor, 25),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_heavy_foot),
					(else_try),
						(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
					(try_end),
				(else_try),
					(eq,l.type,itp_type_hand_armor),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_glove),
				(else_try),
					(eq,l.type,itp_type_horse),
					(set_slot, l.item, slot_item_multiplayer_item_class, multi_item_class_type_horse),
				(try_end),
			(try_end),
			]),
	#script.lbwr_init_vars_once
	("lbwr_init_vars_once",[
			(store_script_param_1, l.force),
			(try_begin),
				(this_or_next|eq, l.force, 1),
				(eq,     g.lwbr_initialized_vars_once, 0),
			] + [ (set_lwbr_var, var, lwbr.var.default_once[var]) for var in lwbr.var.default_once] + [
				(assign, g.lwbr_initialized_vars_once, 1),
			(try_end),
			]),
	#script.lbwr_init_player
	("lbwr_init_player",[
			(store_script_param_1, l.pl),
			(try_begin),
				(player_is_active, l.pl),
			] + [(player_set_slot, l.pl, slot, lwbr.slot_player.default[slot]) for slot in lwbr.slot_player.default] + [
			(try_end),
			]),
	#script.lwbr_ask_player_info
	("lwbr_ask_player_info", lwbr.debug([ (display_message, "@asking info from player"), ]) + [
			] + lwbr.sv_version([
				(store_script_param, l.player, 1),
				] + [ (send_event_to_player, l.player, lwbr.multiplayer_event_client, lwbr.cl_event.ask_var, var)\
					for var in [lwbr.var.version, lwbr.var.nxt_scn_info]] + [
			]) + [#end lwbr.sv_version
			]),
	#script.lwbr_send_player_info
	("lwbr_send_player_info", lwbr.debug([ (display_message, "@sending info to player"), ]) + [
			] + lwbr.sv_version([
				(store_script_param, l.player, 1),
				] + sum([ [
						(get_lwbr_sv_var, l.val, var),
						(send_event_to_player, l.player, lwbr.multiplayer_event_client,
							lwbr.cl_event.return_sv_var, var, l.val, 0, "-Server", lwbr.verbose),
					] for var in lwbr.sv_var.default_sv ],[]) + [
				(store_current_scene, l.scn),
				(call_script, script.lwbr_send_scene_weather_info, l.player, l.scn),
			]) + [#end lwbr.sv_version
			]),

	## SEND EVENTS TO SV/PLAYER ##
	#script.cf_lwbr_filter_player
	("cf_lwbr_filter_player",[
			(store_script_param, l.player, 1),
			(store_script_param, l.filter, 2),
			#player is active
			(player_is_active, l.player),
			#player is admin
			(store_and, l.req, l.filter, lwbr.player_filter("Admin")),
			(this_or_next|eq, l.req, 0),
			(player_is_admin, l.player),
			#player is not admin
			(store_and, l.req, l.filter, lwbr.player_filter("-Admin")),
			(this_or_next|eq, l.req, 0),
			(neg|player_is_admin, l.player),
			#player is not server
			(assign, l.me, -1),
			(try_begin),
				(neg|multiplayer_is_dedicated_server),
				(multiplayer_get_my_player, l.me),
			(try_end),
			(store_and, l.req, l.filter, lwbr.player_filter("-Server")),
			(this_or_next|eq, l.req, 0),
			(neq, l.player, l.me),
			#player is using Native
			(store_and, l.req, l.filter, lwbr.player_filter("Native")),
			(this_or_next|eq, l.req, 0),
			(player_slot_eq, l.player, lwbr.slot_player.version, lwbr.native),
			#player is using WarForge
			(store_and, l.req, l.filter, lwbr.player_filter("WarForge")),
			(this_or_next|eq, l.req, 0),
			(player_slot_ge, l.player, lwbr.slot_player.version, lwbr.native+1),
			]),
	#script.lwbr_send_event_to_players
	("lwbr_send_event_to_players",[
			(try_begin),
				(multiplayer_is_server),
				] + lwbr.sv_version([
					(store_script_param, l.event_type, 1),
					(store_script_param, l.par1, 2),
					(store_script_param, l.par2, 3),
					(store_script_param, l.par3, 4),
					(store_script_param, l.par4, 5),
					(store_script_param, l.filter, 6),
					(store_script_param, l.silent, 7),
					(try_begin),
						(eq, l.silent, 0),
					] + lwbr.debug_func("lwbr_send_event_to_players", [l.event_type, l.par1, l.par2, l.par3, l.par4, l.filter]) + [
					(try_end),
					(try_for_players, l.player),
						(filter_player, l.player, l.filter),
						] + lwbr.debug([
							(try_begin),
								(eq, l.silent, 0),
								(assign, reg42, l.player),
								(display_message, "@sending to player {reg42}"),
							(try_end),
						]) + [#end lwbr.debug
						(multiplayer_send_4_int_to_player, l.player, l.event_type, l.par1, l.par2, l.par3, l.par4),
				(try_end),
				]) + [#end lwbr.sv_version
			(try_end),
			]),
	#script.lwbr_send_event_to_player
	("lwbr_send_event_to_player",[
			(try_begin),
				(multiplayer_is_server),
				] + lwbr.sv_version([
					(store_script_param,l.player,1),
					(store_script_param,l.event_type,2),
					(store_script_param,l.par1,3),
					(store_script_param,l.par2,4),
					(store_script_param,l.par3,5),
					(store_script_param,l.par4,6),
					(store_script_param,l.filter,7),
					(store_script_param,l.silent,8),
					(try_begin),
						(eq, l.silent, 0),
						] + lwbr.debug_func("lwbr_send_event_to_player", [l.player, l.event_type, l.par1, l.par2, l.par3, l.par4, l.filter]) + [
					(try_end),
					(filter_player, l.player, l.filter),
					(multiplayer_send_4_int_to_player, l.player, l.event_type, l.par1, l.par2, l.par3, l.par4),
				]) + [#end lwbr.sv_version
			(try_end),
			]),
	#script.lwbr_send_event_to_server
	("lwbr_send_event_to_server",[
			(try_begin),
				(neg|multiplayer_is_dedicated_server),
				] + lwbr.cl_version([
					(store_script_param,l.event_type,1),
					(store_script_param,l.par1,2),
					(store_script_param,l.par2,3),
					(store_script_param,l.par3,4),
					(store_script_param,l.par4,5),
					(store_script_param,l.silent,6),
					(try_begin),
						(eq, l.silent, 0),
						] + lwbr.debug_func("lwbr_send_event_to_server", [l.event_type, l.par1, l.par2, l.par3, l.par4]) + [
					(try_end),
					(multiplayer_send_4_int_to_server, l.event_type, l.par1, l.par2, l.par3, l.par4),
				]) + [#end lwbr.cl_version
			(try_end),
			]),


	## VARs and SV_VARs
	#script.lwbr_set_var
	("lwbr_set_var",[
			(store_script_param, l.var, 1),
			(store_script_param, l.val, 2),
			(store_script_param, l.sync, 3),
			(get_slot, l.pre, trp.lwbr_vars, l.var),
			(set_slot, trp.lwbr_vars, l.var, l.val),
			(try_begin),
				(neq, l.pre, l.val),
				(try_begin),
					(eq, l.sync, lwbr.sync_to_cl),
					(multiplayer_is_server),
					] + lwbr.sv_version([
						(send_event_to_players, lwbr.multiplayer_event_client, lwbr.cl_event.set_var, l.var, l.val),
					]) + [#end lwbr.sv_version
				(else_try),
					(eq, l.sync, lwbr.sync_to_sv),
					(neg|multiplayer_is_dedicated_server),
					] + lwbr.cl_version([
						(send_event_to_server, lwbr.multiplayer_event_server, lwbr.sv_event.return_var, l.var, l.val),
					]) + [#end lwbr.cl_version
				(try_end),
			(try_end),
			]),
	#script.lwbr_set_sv_var
	("lwbr_set_sv_var",[
			(store_script_param, l.var, 1),
			(store_script_param, l.val, 2),
			(store_script_param, l.sync, 3),
			(get_slot, l.pre, trp.lwbr_sv_vars, l.var),
			(set_slot, trp.lwbr_sv_vars, l.var, l.val),
			(try_begin),
				(neq, l.pre, l.val),
				(try_begin),
					(eq, l.sync, 1),
					(multiplayer_is_server),
					] + lwbr.sv_version([
						(send_event_to_players, lwbr.multiplayer_event_client,
							lwbr.cl_event.return_sv_var, l.var, l.val, 0, lwbr.player_filter("-Server|WarForge")),
					]) + [#end lwbr.sv_version
				(else_try),
					(eq, l.sync, 2),
					(neg|multiplayer_is_dedicated_server),
					] + lwbr.cl_version([
						(send_event_to_server, lwbr.multiplayer_event_server, lwbr.sv_event.set_sv_var, l.var, l.val),
					]) + [#end lwbr.cl_version
				(try_end),
			(try_end),
			]),
	#script.lwbr_get_var
	("lwbr_get_var",[
			(store_script_param, l.var, 1),
			(get_slot, reg42, trp.lwbr_vars, l.var),
			]),
	#script.lwbr_get_sv_var
	("lwbr_get_sv_var",[
			(store_script_param, l.var, 1),
			(get_slot, reg42, trp.lwbr_sv_vars, l.var),
			]),

	## WEATHER ##
	#script.lwbr_calc_weather
	("lwbr_calc_weather",[
			#(store_current_scene, l.scn),
			(store_script_param, l.scn, 1),
			(get_slot, l.rain_min,	l.scn, lwbr.slot_scene.rain_min),
			(get_slot, l.rain_max,	l.scn, lwbr.slot_scene.rain_max),
			(get_slot, l.rain_chance,	l.scn, lwbr.slot_scene.rain_chance),
			(get_slot, l.snow_chance,	l.scn, lwbr.slot_scene.snow_chance),
			(get_slot, l.fog_min,		l.scn, lwbr.slot_scene.fog_min),
			(get_slot, l.fog_max,		l.scn, lwbr.slot_scene.fog_max),
			(get_slot, l.fog_color1,	l.scn, lwbr.slot_scene.fog_color1),
			(get_slot, l.fog_color2,	l.scn, lwbr.slot_scene.fog_color2),

			(store_random_in_range, l.rnd, 0, 100),
			(try_begin),
				(lt, l.rnd, l.rain_chance),
				(set_slot, l.scn, lwbr.slot_scene.cur_wt_typ, 1),
			(else_try),
				(lt, l.rnd, l.snow_chance),
				(set_slot, l.scn, lwbr.slot_scene.cur_wt_typ, 2),
			(else_try),
				(set_slot, l.scn, lwbr.slot_scene.cur_wt_typ, 0),
			(try_end),

			(store_random_in_range, l.rnd, l.rain_min, l.rain_max),
			(set_slot, l.scn, lwbr.slot_scene.cur_wt_str, l.rnd),

			(store_random_in_range, l.rnd, l.fog_min, l.fog_max),
			(set_slot, l.scn, lwbr.slot_scene.cur_wt_fgD, l.rnd),

			(try_begin),
				(eq, l.fog_color1, l.fog_color2),
				(assign, l.rgb, l.fog_color1),
			(else_try),
				(store_and, l.r1, l.fog_color1, 0xFF0000),#get the R,G,B components of each color
				(store_and, l.r2, l.fog_color2, 0xFF0000),
				(store_and, l.g1, l.fog_color1, 0x00FF00),
				(store_and, l.g2, l.fog_color2, 0x00FF00),
				(store_and, l.b1, l.fog_color1, 0x0000FF),
				(store_and, l.b2, l.fog_color2, 0x0000FF),

				(val_div, l.r1, 0x010000),#normalize them
				(val_div, l.r2, 0x010000),
				(val_div, l.g1, 0x000100),
				(val_div, l.g2, 0x000100),
				#(val_div, l.b1, 0x000001),
				#(val_div, l.b2, 0x000001),

				(store_random_in_range, l.r, l.r1, l.r2),#get a random in between each
				(store_random_in_range, l.g, l.g1, l.g2),
				(store_random_in_range, l.b, l.b1, l.b2),

				(store_mul, l.R, l.r, 0x010000),#multiply them back
				(store_mul, l.G, l.g, 0x000100),
				(store_mul, l.B, l.b, 0x000001),

				(store_or, l.rg, l.R, l.G),#and combine them
				(store_or, l.rgb, l.rg, l.B),
				] + lwbr.debug([
					(try_begin),
						(is_between, l.scn, multiplayer_scenes_begin, multiplayer_scenes_end),

						(call_script, script.game_get_scene_name, l.scn),

						(display_message, "@l.scn = {s0}"),

						(assign, reg0, l.r1),
						(assign, reg1, l.r2),
						(assign, reg2, l.r),
						(display_message, "@fog r = random_in_range({reg0},{reg1}) = {reg2}"),

						(assign, reg0, l.g1),
						(assign, reg1, l.g2),
						(assign, reg2, l.g),
						(display_message, "@fog g = random_in_range({reg0},{reg1}) = {reg2}"),

						(assign, reg0, l.b1),
						(assign, reg1, l.b2),
						(assign, reg2, l.b),
						(display_message, "@fog b = random_in_range({reg0},{reg1}) = {reg2}"),

						(assign, reg0, l.fog_color1),
						(assign, reg1, l.fog_color2),
						(assign, reg2, l.rgb),
						(display_message, "@fog rgb = random_in_range({reg0},{reg1}) = {reg2}"),
					(try_end),
				]) + [#end lwbr.debug
			(try_end),
			(set_slot, l.scn, lwbr.slot_scene.cur_wt_fgC, l.rgb),

			(try_begin),
				(multiplayer_is_server),
				] + lwbr.sv_version([
					(try_for_players, l.player_no),
						(call_script, script.lwbr_send_scene_weather_info, l.player_no, l.scn),
					(try_end),
				]) + [#end lwbr.sv_version
			(try_end),
			]),
	#script.lwbr_set_weather
	("lwbr_set_weather",[
			#(store_current_scene, l.scn),
			(store_script_param_1, l.scn),
			(get_lwbr_sv_var, l.weather_config,	lwbr.sv_var.weather_config),
			(get_lwbr_sv_var, l.time_config,		lwbr.sv_var.time_config),
			(get_lwbr_sv_var, l.fog_config,		lwbr.sv_var.fog_config),
			#rain/snow
			(try_begin),
				(eq, l.weather_config, 0),
				(get_slot, l.typ, l.scn, lwbr.slot_scene.cur_wt_typ),
				(get_slot, l.str, l.scn, lwbr.slot_scene.cur_wt_str),
			(else_try),
				(eq, l.weather_config, 1),
				(assign, l.typ, 0),
				(assign, l.str, 0),
			(else_try),
				(eq, l.weather_config, 2),
				(assign, l.typ, 1),
				(store_random_in_range, l.str, 30, 100),
			(else_try),
				(eq, l.weather_config, 3),
				(assign, l.typ, 2),
				(store_random_in_range, l.str, 30, 100),
			(try_end),
			#time
			(try_begin),
				(eq, l.time_config, 0),
				(store_random_in_range, l.tim, 0, 24),
			(else_try),
				(eq, l.time_config, 1),
				(store_random_in_range, l.tim, 6, 18),
			(else_try),
				(eq, l.time_config, 2),
				(assign, l.tim, 6),
			(else_try),
				(eq, l.time_config, 3),
				(assign, l.tim, 12),
			(else_try),
				(eq, l.time_config, 4),
				(assign, l.tim, 18),
			(else_try),
				(eq, l.time_config, 5),
				(assign, l.tim, 24),
			(try_end),
			#fog
			(get_slot, l.fgC, l.scn, lwbr.slot_scene.cur_wt_fgC),
			(try_begin),
				(eq, l.fog_config, 0),
				(get_slot, l.fgD, l.scn, lwbr.slot_scene.cur_wt_fgD),
			(else_try),
				(eq, l.fog_config, 1),
				(assign, l.fgD, 1000),
			(else_try),
				(eq, l.fog_config, 2),
				(store_random_in_range, l.fgD, 300, 700),
			(else_try),
				(eq, l.fog_config, 3),
				(store_random_in_range, l.fgD, 10, 150),
			(else_try),
				(eq, l.fog_config, 4),
				(store_random_in_range, l.fgD, 0, 1000),
			(try_end),
			] + lwbr.debug_func("lwbr_set_weather",[l.weather_config,l.fog_config,l.time_config,l.typ,l.str,l.fgD,l.fgC,l.tim]) + [
			(try_begin),
				(is_between, l.tim, 0, 24),
				(is_between, l.typ, 0, 3),
				(is_between, l.str, 0, 100),
				(neq, l.fgD, -1),
				(neq, l.fgC, -1),
				(scene_set_day_time, l.tim),
				(set_rain, l.typ, l.str),
				(set_fog_distance, l.fgD, l.fgC),
			(else_try),
				(call_script, script.lwbr_calc_weather, l.scn),
				(call_script, script.lwbr_set_weather, l.scn),
			(try_end),
			]),
	#script.lwbr_send_scene_weather_info
	("lwbr_send_scene_weather_info",[
			] + lwbr.sv_version([
				(store_script_param_1, l.player),
				(store_script_param_2, l.scn),
				(player_is_active, l.player),
				(store_add, l.end, lwbr.slot_scene.cur_wt_fgC, 1),
				# (try_for_range, l.slot, lwbr.slot_scene.cur_wt_typ, l.end),
				(try_for_range, l.slot, lwbr.slot_scene.available_dm, l.end),
					(get_slot, l.val, l.scn, l.slot),
					(send_event_to_player, l.player, lwbr.multiplayer_event_client,
						lwbr.cl_event.set_scene_slot, l.scn, l.slot, l.val, "WarForge", 1),
					(val_add, g.lwbr_wt_events_sent, 1),
					# (ge, g.lwbr_wt_events_sent, lwbr.wt_event_limit),
					# (assign, l.end, 0),
				(try_end),
			]) + [#end lwbr.sv_version
			]),
	#script.lwbr_send_weather_info
	("lwbr_send_weather_info",[
			] + lwbr.sv_version([
				(store_script_param_1, l.player),
				(try_begin),
					(filter_player, l.player, "-Server"),
					(player_get_slot, l.start, l.player, lwbr.slot_player.nxt_scn_info),
					(neq, l.start, -1),
					(lt, l.start, scn.end),
					(store_add, l.end, l.start, 10),
					(val_min, l.end, scn.end),
					(try_for_range, l.scn, l.start, l.end),
						(player_is_active, l.player),
						(call_script, script.lwbr_send_scene_weather_info, l.player, l.scn),

						(lt, g.lwbr_wt_events_sent, lwbr.wt_event_limit),
					(else_try),
						(assign, l.end, l.scn),
					(try_end),
					(player_is_active, l.player),
					(player_set_slot, l.player, lwbr.slot_player.nxt_scn_info, l.end),
				(try_end),
			]) + [#end lwbr.sv_version
			]),


	## ITEMS ##
	#script.lwbr_set_item_for_troop
	("lwbr_set_item_for_troop",[
			(store_script_param, l.itm, 1),
			(store_script_param, l.trp, 2),
			(store_script_param, l.val, 3),
			(store_add, l.slot, l.trp, slot_item_multiplayer_availability_linked_list_begin - multiplayer_troops_begin),
			(item_set_slot, l.itm, l.slot, l.val),
			]),
	#script.lwbr_get_item_for_troop
	("lwbr_get_item_for_troop",[
			(store_script_param, l.itm, 1),
			(store_script_param, l.trp, 2),
			(store_add, l.slot, l.trp, slot_item_multiplayer_availability_linked_list_begin - multiplayer_troops_begin),
			(item_get_slot, reg42, l.itm, l.slot),
			]),
	#script.lwbr_force_change_weapons
	("lwbr_force_change_weapons",[
			] + lwbr.cl_version([
				(multiplayer_get_my_player, l.me),
				# (call_script, script.multiplayer_clear_player_selected_items, l.me),
				(player_get_troop_id, l.trp, l.me),
				(try_begin),
					(gt, l.trp, -1),
					(try_for_range, l.slot, lwbr.slot_troop.sel_head, lwbr.slot_troop.sel_wpn4+1),
						(troop_set_slot, l.trp, l.slot, -2),
					(try_end),
					(call_script, script.multiplayer_set_default_item_selections_for_troop, l.trp),
				(try_end),
			]) + [#end lwbr.cl_version
			]),
	#script.lwbr_add_rnd_itm_of_type
	("lwbr_add_rnd_itm_of_type",[
			(store_script_param, l.trp, 1),
			(store_script_param, l.itp, 2),
			(store_script_param, l.cnt, 3),
			(store_script_param, l.ek,  4),
			(store_script_param, l.pl,  5),
			(try_begin),
				(gt, l.cnt, 0),
				(store_random_in_range, l.rnd, 0, l.cnt),
				(try_for_troop_items, l.itm, l.trp),
					(item_get_type, l.type, l.itm),
					(eq, l.type, l.itp),
					(try_begin),
						(eq, l.rnd, 0),
						] + lwbr.debug([
							(str_store_item_name, s0, l.itm),
							(str_store_player_username, s1, l.pl),
							(display_message,"@Adding itm.{s0} to player {s1}"),
						]) + [
						(player_add_spawn_item, l.pl, l.ek, l.itm),
						(try_for_troop_items_break),
					(try_end),
					(val_sub, l.rnd, 1),
				(try_end),
			(try_end),
			]),



	## OTHER ##
	#script.lwbr_get_key_name
	("lwbr_get_key_name",[
			(store_script_param_1,l.key),
			(try_begin),
				(eq,l.key,-1),
				(str_store_string,s1,"@Disabled"),
			(else_try),
				(eq,l.key,key_1),
				(str_store_string,s1,"@1"),
			(else_try),
				(eq,l.key,key_2),
				(str_store_string,s1,"@2"),
			(else_try),
				(eq,l.key,key_3),
				(str_store_string,s1,"@3"),
			(else_try),
				(eq,l.key,key_4),
				(str_store_string,s1,"@4"),
			(else_try),
				(eq,l.key,key_5),
				(str_store_string,s1,"@5"),
			(else_try),
				(eq,l.key,key_6),
				(str_store_string,s1,"@6"),
			(else_try),
				(eq,l.key,key_7),
				(str_store_string,s1,"@7"),
			(else_try),
				(eq,l.key,key_8),
				(str_store_string,s1,"@8"),
			(else_try),
				(eq,l.key,key_9),
				(str_store_string,s1,"@9"),
			(else_try),
				(eq,l.key,key_0),
				(str_store_string,s1,"@0"),
			(else_try),
				(eq,l.key,key_a),
				(str_store_string,s1,"@A"),
			(else_try),
				(eq,l.key,key_b),
				(str_store_string,s1,"@B"),
			(else_try),
				(eq,l.key,key_c),
				(str_store_string,s1,"@C"),
			(else_try),
				(eq,l.key,key_d),
				(str_store_string,s1,"@D"),
			(else_try),
				(eq,l.key,key_e),
				(str_store_string,s1,"@E"),
			(else_try),
				(eq,l.key,key_f),
				(str_store_string,s1,"@F"),
			(else_try),
				(eq,l.key,key_g),
				(str_store_string,s1,"@G"),
			(else_try),
				(eq,l.key,key_h),
				(str_store_string,s1,"@H"),
			(else_try),
				(eq,l.key,key_i),
				(str_store_string,s1,"@I"),
			(else_try),
				(eq,l.key,key_j),
				(str_store_string,s1,"@J"),
			(else_try),
				(eq,l.key,key_k),
				(str_store_string,s1,"@K"),
			(else_try),
				(eq,l.key,key_l),
				(str_store_string,s1,"@L"),
			(else_try),
				(eq,l.key,key_m),
				(str_store_string,s1,"@M"),
			(else_try),
				(eq,l.key,key_n),
				(str_store_string,s1,"@N"),
			(else_try),
				(eq,l.key,key_o),
				(str_store_string,s1,"@O"),
			(else_try),
				(eq,l.key,key_p),
				(str_store_string,s1,"@P"),
			(else_try),
				(eq,l.key,key_q),
				(str_store_string,s1,"@Q"),
			(else_try),
				(eq,l.key,key_r),
				(str_store_string,s1,"@R"),
			(else_try),
				(eq,l.key,key_s),
				(str_store_string,s1,"@S"),
			(else_try),
				(eq,l.key,key_t),
				(str_store_string,s1,"@T"),
			(else_try),
				(eq,l.key,key_u),
				(str_store_string,s1,"@U"),
			(else_try),
				(eq,l.key,key_v),
				(str_store_string,s1,"@V"),
			(else_try),
				(eq,l.key,key_w),
				(str_store_string,s1,"@W"),
			(else_try),
				(eq,l.key,key_x),
				(str_store_string,s1,"@X"),
			(else_try),
				(eq,l.key,key_y),
				(str_store_string,s1,"@Y"),
			(else_try),
				(eq,l.key,key_z),
				(str_store_string,s1,"@Z"),
			(else_try),
				(eq,l.key,key_numpad_0),
				(str_store_string,s1,"@Numpad 0"),
			(else_try),
				(eq,l.key,key_numpad_1),
				(str_store_string,s1,"@Numpad 1"),
			(else_try),
				(eq,l.key,key_numpad_2),
				(str_store_string,s1,"@Numpad 2"),
			(else_try),
				(eq,l.key,key_numpad_3),
				(str_store_string,s1,"@Numpad 3"),
			(else_try),
				(eq,l.key,key_numpad_4),
				(str_store_string,s1,"@Numpad 4"),
			(else_try),
				(eq,l.key,key_numpad_5),
				(str_store_string,s1,"@Numpad 5"),
			(else_try),
				(eq,l.key,key_numpad_6),
				(str_store_string,s1,"@Numpad 6"),
			(else_try),
				(eq,l.key,key_numpad_7),
				(str_store_string,s1,"@Numpad 7"),
			(else_try),
				(eq,l.key,key_numpad_8),
				(str_store_string,s1,"@Numpad 8"),
			(else_try),
				(eq,l.key,key_numpad_9),
				(str_store_string,s1,"@Numpad 9"),
			(else_try),
				(eq,l.key,key_num_lock),
				(str_store_string,s1,"@Num Lock"),
			(else_try),
				(eq,l.key,key_numpad_slash),
				(str_store_string,s1,"@Numpad /"),
			(else_try),
				(eq,l.key,key_numpad_multiply),
				(str_store_string,s1,"@Numpad *"),
			(else_try),
				(eq,l.key,key_numpad_minus),
				(str_store_string,s1,"@Numpad -"),
			(else_try),
				(eq,l.key,key_numpad_plus),
				(str_store_string,s1,"@Numpad +"),
			(else_try),
				(eq,l.key,key_numpad_enter),
				(str_store_string,s1,"@Numpad Enter"),
			(else_try),
				(eq,l.key,key_numpad_period),
				(str_store_string,s1,"@Numpad ."),
			(else_try),
				(eq,l.key,key_insert),
				(str_store_string,s1,"@Insert"),
			(else_try),
				(eq,l.key,key_delete),
				(str_store_string,s1,"@Delete"),
			(else_try),
				(eq,l.key,key_home),
				(str_store_string,s1,"@Home"),
			(else_try),
				(eq,l.key,key_end),
				(str_store_string,s1,"@End"),
			(else_try),
				(eq,l.key,key_page_up),
				(str_store_string,s1,"@Pg Up"),
			(else_try),
				(eq,l.key,key_page_down),
				(str_store_string,s1,"@Pg Down"),
			(else_try),
				(eq,l.key,key_up),
				(str_store_string,s1,"@Up Arrow"),
			(else_try),
				(eq,l.key,key_down),
				(str_store_string,s1,"@Down Arrow"),
			(else_try),
				(eq,l.key,key_left),
				(str_store_string,s1,"@Left Arrow"),
			(else_try),
				(eq,l.key,key_right),
				(str_store_string,s1,"@Right Arrow"),
			(else_try),
				(eq,l.key,key_f1),
				(str_store_string,s1,"@F1"),
			(else_try),
				(eq,l.key,key_f2),
				(str_store_string,s1,"@F2"),
			(else_try),
				(eq,l.key,key_f3),
				(str_store_string,s1,"@F3"),
			(else_try),
				(eq,l.key,key_f4),
				(str_store_string,s1,"@F4"),
			(else_try),
				(eq,l.key,key_f5),
				(str_store_string,s1,"@F5"),
			(else_try),
				(eq,l.key,key_f6),
				(str_store_string,s1,"@F6"),
			(else_try),
				(eq,l.key,key_f7),
				(str_store_string,s1,"@F7"),
			(else_try),
				(eq,l.key,key_f8),
				(str_store_string,s1,"@F8"),
			(else_try),
				(eq,l.key,key_f9),
				(str_store_string,s1,"@F9"),
			(else_try),
				(eq,l.key,key_f10),
				(str_store_string,s1,"@F10"),
			(else_try),
				(eq,l.key,key_f11),
				(str_store_string,s1,"@F11"),
			(else_try),
				(eq,l.key,key_f12),
				(str_store_string,s1,"@F12"),
			(else_try),
				(eq,l.key,key_space),
				(str_store_string,s1,"@Spacebar"),
			(else_try),
				(eq,l.key,key_escape),
				(str_store_string,s1,"@Esc"),
			(else_try),
				(eq,l.key,key_enter),
				(str_store_string,s1,"@Enter"),
			(else_try),
				(eq,l.key,key_tab),
				(str_store_string,s1,"@Tab"),
			(else_try),
				(eq,l.key,key_back_space),
				(str_store_string,s1,"@Backspace"),
			(else_try),
				(eq,l.key,key_open_braces),
				(str_store_string,s1,"@ [ "),
			(else_try),
				(eq,l.key,key_close_braces),
				(str_store_string,s1,"@ ] "),
			(else_try),
				(eq,l.key,key_comma),
				(str_store_string,s1,"@ , "),
			(else_try),
				(eq,l.key,key_period),
				(str_store_string,s1,"@ . "),
			(else_try),
				(eq,l.key,key_slash),
				(str_store_string,s1,"@ / "),
			(else_try),
				(eq,l.key,key_back_slash),
				(str_store_string,s1,"@ \ "),
			(else_try),
				(eq,l.key,key_equals),
				(str_store_string,s1,"@ = "),
			(else_try),
				(eq,l.key,key_minus),
				(str_store_string,s1,"@ - "),
			(else_try),
				(eq,l.key,key_semicolon),
				(str_store_string,s1,"@ ; "),
			(else_try),
				(eq,l.key,key_apostrophe),
				(str_store_string,s1,"@ ' "),
			(else_try),
				(eq,l.key,key_tilde),
				(str_store_string,s1,"@ ~ "),
			(else_try),
				(eq,l.key,key_caps_lock),
				(str_store_string,s1,"@Caps Lock"),
			(else_try),
				(eq,l.key,key_left_shift),
				(str_store_string,s1,"@Left Shift"),
			(else_try),
				(eq,l.key,key_right_shift),
				(str_store_string,s1,"@Right Shift"),
			(else_try),
				(eq,l.key,key_left_control),
				(str_store_string,s1,"@Left Cntrl"),
			(else_try),
				(eq,l.key,key_right_control),
				(str_store_string,s1,"@Right Cntrl"),
			(else_try),
				(eq,l.key,key_left_alt),
				(str_store_string,s1,"@Left Alt"),
			(else_try),
				(eq,l.key,key_right_alt),
				(str_store_string,s1,"@Right Alt"),
			(else_try),
				(eq,l.key,key_left_mouse_button),
				(str_store_string,s1,"@Left Mouse Button"),
			(else_try),
				(eq,l.key,key_right_mouse_button),
				(str_store_string,s1,"@Right Mouse Button"),
			(else_try),
				(eq,l.key,key_middle_mouse_button),
				(str_store_string,s1,"@Middle Mouse Button"),
			(else_try),
				(eq,l.key,key_mouse_button_4),
				(str_store_string,s1,"@Mouse Button 4"),
			(else_try),
				(eq,l.key,key_mouse_button_5),
				(str_store_string,s1,"@Mouse Button 5"),
			(else_try),
				(eq,l.key,key_mouse_button_6),
				(str_store_string,s1,"@Mouse Button 6"),
			(else_try),
				(eq,l.key,key_mouse_button_7),
				(str_store_string,s1,"@Mouse Button 7"),
			(else_try),
				(eq,l.key,key_mouse_button_8),
				(str_store_string,s1,"@Mouse Button 8"),
			(else_try),
				(eq,l.key,key_mouse_scroll_up),
				(str_store_string,s1,"@Mouse Scroll Up"),
			(else_try),
				(eq,l.key,key_mouse_scroll_down),
				(str_store_string,s1,"@Mouse Scroll Down"),
			(else_try),
				(eq,l.key,key_xbox_a),
				(str_store_string,s1,"@xBox A"),
			(else_try),
				(eq,l.key,key_xbox_b),
				(str_store_string,s1,"@xBox B"),
			(else_try),
				(eq,l.key,key_xbox_x),
				(str_store_string,s1,"@xBox X"),
			(else_try),
				(eq,l.key,key_xbox_y),
				(str_store_string,s1,"@xBox Y"),
			(else_try),
				(eq,l.key,key_xbox_dpad_up),
				(str_store_string,s1,"@xBox dPad Up"),
			(else_try),
				(eq,l.key,key_xbox_dpad_down),
				(str_store_string,s1,"@xBox dPad Down"),
			(else_try),
				(eq,l.key,key_xbox_dpad_right),
				(str_store_string,s1,"@xBox dPad Right"),
			(else_try),
				(eq,l.key,key_xbox_dpad_left),
				(str_store_string,s1,"@xBox dPad Left"),
			(else_try),
				(eq,l.key,key_xbox_start),
				(str_store_string,s1,"@xBox Start"),
			(else_try),
				(eq,l.key,key_xbox_back),
				(str_store_string,s1,"@xBox Back"),
			(else_try),
				(eq,l.key,key_xbox_rbumper),
				(str_store_string,s1,"@xBox Right Bumper"),
			(else_try),
				(eq,l.key,key_xbox_lbumper),
				(str_store_string,s1,"@xBox Left Bumper "),
			(else_try),
				(eq,l.key,key_xbox_ltrigger),
				(str_store_string,s1,"@xBox Right Trigger"),
			(else_try),
				(eq,l.key,key_xbox_rtrigger),
				(str_store_string,s1,"@xBox Left Trigger"),
			(else_try),
				(eq,l.key,key_xbox_rstick),
				(str_store_string,s1,"@xBox Right Stick"),
			(else_try),
				(eq,l.key,key_xbox_lstick),
				(str_store_string,s1,"@xBox Left Stick"),
			(try_end),
			]),
	#script.lwbr_knock_down_from_horse
	("lwbr_knock_down_from_horse",[
			(store_script_param_1,l.agent_no),
			(try_begin),
				(agent_is_active,l.agent_no),
				(agent_get_horse,l.horse,l.agent_no),
				(agent_is_active,l.horse),
				(agent_start_running_away,l.horse),
				(agent_stop_running_away,l.horse),
				(store_agent_hit_points, l.hp, l.agent_no, 1),
				(store_random_in_range, l.dmg, 4, 15),#4-14 dmg
				(val_sub, l.hp, l.dmg),
				(val_max, l.hp, 1),
				(agent_set_hit_points, l.agent_no, l.hp, 1),
				(agent_deliver_damage_to_agent,l.horse,l.agent_no,1),
				(store_random_in_range,l.anim,"anim_rider_fall_right","anim_strike_chest_front_stop"),
				(try_begin),
					(agent_get_player_id,l.player_no, l.agent_no),
					(agent_is_active,l.agent_no),
					(assign,reg1,l.anim),
					(str_store_player_username, s1, l.player_no),
					(str_store_string, s1, "@Player {s1} fell from horse with anim = {reg1}."),
					(server_add_message_to_log, s1),
				(try_end),
				(try_begin),
					(gt, lwbr.debug_mode, 1),
					(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message,
						"@Falling anim is {reg1}."),
				(try_end),
				(agent_set_animation,l.agent_no,l.anim, 0),
				(agent_set_animation,l.agent_no,l.anim, 1),
			(try_end),
			]),
	#script.lwbr_taunt
	("lwbr_taunt",[
			(store_script_param_1,l.agent_no),
			(store_script_param_2,l.taunt),
			(try_begin),
				(agent_is_active, l.agent_no),
				(agent_get_player_id, l.player_no, l.agent_no),
				(player_is_active, l.player_no),
				(agent_is_alive, l.agent_no),
				(agent_get_animation,l.anim, l.agent_no, 0),
				(try_begin),
					(eq,l.anim, "anim_stand_man"),
					(eq,l.taunt, 0),
					(agent_set_animation,l.agent_no,"anim_cheer_stand", 1),
				(else_try),
					(eq,l.taunt, 0),
					(agent_set_animation,l.agent_no,"anim_cheer", 1),
				(try_end),
				(try_begin),
					(player_get_gender, l.gender, l.player_no),
					(eq, l.gender, 1),#female
					(try_begin),
						# (eq,l.taunt, 0),
						(str_store_string, s2, "@cheer"),
						(assign, l.sound, "snd_woman_yell"),
					# (else_try),
					# 	(str_store_string, s2, "@taunt"),
					# 	(store_random_in_range, l.sound, "snd_woman_die", "snd_hide"),
					(try_end),
				(else_try),
					(try_begin),
						(eq,l.taunt, 0),
						(str_store_string, s2, "@cheer"),
						(assign, l.sound, "snd_man_warcry"),
					(else_try),
						(str_store_string, s2, "@taunt"),
						(store_random_in_range, l.sound, "snd_man_warcry", "snd_encounter_nobleman"),
					(try_end),
				(try_end),
				(agent_play_sound, l.agent_no, l.sound),

				(assign,reg1,l.sound),
				(assign,reg2,l.anim),
				(str_store_player_username, s1, l.player_no),
				(str_store_string, s1, "@Player {s1} {s2}ed with sound = {reg1}."),
				(server_add_message_to_log, s1),
				(try_begin),
					(eq, lwbr.debug_mode, 1),
					(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message,
						"@{s2} sound is {reg1} and anim is {reg2}"),
				(try_end),
			(try_end),
			]),
	#script.lwbr_drop_shield ##TODO
	# ("lwbr_drop_shield",[
			# #(store_script_param_1,l.agent_no),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(agent_get_player_id, l.player_no, l.agent_no),
			# 	#(player_is_active, l.player_no),
			# 	#(agent_is_alive, l.agent_no),
			# 	#(str_store_player_username, s1, l.player_no),
			# 	#(try_begin),
			# 		#(agent_get_wielded_item, l.shield, l.agent_no, 1),
			# 		#(neq, l.shield, -1),
			# 		#(item_get_type, l.type, l.shield),
			# 		#(eq, l.type, itp_type_shield),
			# 		###TODO: drop shield
			# 		#(str_store_string, s1, "@Player dropped his shield."),
			# 		#(server_add_message_to_log, s1),
			# 	#(try_end),
			# 	#(try_begin),
			# 		#(eq, lwbr.debug_mode, 1),
			# 		#(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message,
			# 			"@{s2} sound is {reg1} and anim is {reg2}"),
			# 	#(try_end),
			# #(try_end),
			# ]),
	#script.lwbr_crouch ##TODO
	# ("lwbr_crouch",[
			# #(store_script_param_1,l.agent_no),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(neg|agent_is_non_player, l.agent_no),
			# 	#(agent_get_player_id, l.player_no, l.agent_no),
			# 	#(player_is_active, l.player_no),
			# 	#(agent_is_alive, l.agent_no),
			# 	#(agent_get_horse, l.horse, l.agent_no),
			# 	#(str_store_player_username, s1, l.player_no),
			# 	##(agent_get_crouch_mode, reg1, l.agent_no),
			# 	#(try_begin),
			# 		##(eq, reg1, 0),
			# 		##(agent_set_crouch_mode, l.agent_no, 1),
			# 		#(agent_slot_eq, l.agent_no, slot_agent_crouch, 0),
			# 		#(agent_set_animation, l.agent_no, "anim_stand_to_crouch", 0),
			# 		#(agent_set_slot, l.agent_no, slot_agent_crouch, 1),
			# 		#(str_store_string, s1, "@CROUCH TEST: Player {s1} crouched."),
			# 		#(server_add_message_to_log, s1),
			# 	#(else_try),
			# 		##(agent_set_crouch_mode, l.agent_no, 0),
			# 		#(agent_slot_eq, l.agent_no, slot_agent_crouch, 1),
			# 		##(agent_set_animation, l.agent_no, "anim_crouch_to_stand", 0),
			# 		#(agent_set_slot, l.agent_no, slot_agent_crouch, 0),
			# 		#(str_store_string, s1, "@CROUCH TEST: Player {s1} stood up."),
			# 		#(server_add_message_to_log, s1),
			# 	#(try_end),
			# 	#(try_begin),
			# 		#(eq, lwbr.debug_mode, 1),
			# 		#(multiplayer_send_string_to_player, l.player_no, multiplayer_event_show_server_message,
			# 			"@DEBUG: You just {reg20?stood up:crouched}."),
			# 	#(try_end),
			# #(try_end),
			# ]),
	#script.lwbr_get_crouch_anim ##TODO
	# ("lwbr_get_crouch_anim",[
			# #(store_script_param_1,l.agent_no),
			# #(assign, l.anim, "anim_crouch_unarmed"),
			# #(try_begin),
			# 	#(agent_is_active, l.agent_no),
			# 	#(agent_is_human, l.agent_no),
			# 	#(agent_get_wielded_item, l.item, l.agent_no),
			# 	#(try_begin),
			# 		#(ge, l.item, 0),
			# 		#(item_get_type, l.item_type, l.item),
			# 		#(try_begin),
			# 			#(eq, l.item_type, itp_type_one_handed_wpn),
			# 			#(assign, l.anim, "anim_crouch_single"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_two_handed_wpn),
			# 			#(assign, l.anim, "anim_crouch_greatsword"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_polearm),
			# 			#(assign, l.anim, "anim_crouch_staff"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_crossbow),
			# 			#(assign, l.anim, "anim_crouch_crossbow"),
			# 		#(else_try),
			# 			#(eq, l.item_type, itp_type_pistol),
			# 			#(assign, l.anim, "anim_crouch_ready_pistol"),
			# 		#(try_end),
			# 	#(try_end),
			# #(try_end),
			# #(assign, reg0, l.anim),
			# ]),
	#script.lwbr_quit_server
	# ("lwbr_quit_server",[
			# (set_rain, 0, 0),
			# (scene_set_day_time, 12),
			# (set_fog_distance, 10000),
			# (call_script,script.lwbr_initialize_variables),
			# ]),
	#script.lwbr_store_troop_stats_all
	# ("lwbr_store_troop_stats_all",[
			# (try_for_range, l.troop, trp.swadian_crossbowman_multiplayer, trp.multiplayer_end),
			# 	(call_script, script.lwbr_store_troop_stats, l.troop),
			# (try_end),
			# ]),
	#script.lwbr_store_troop_stats
	# ("lwbr_store_troop_stats",[
			# (store_script_param_1, l.troop),
			# #
			# (try_for_range, l.slot, slot_troop_stats_begin, slot_troop_stats_end),
			# 	(store_sub, l.value, l.slot, slot_troop_stats_begin),
			# 	(store_attribute_level, l.value2, l.troop, l.value),
			# 	(set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} stat '{reg1}' default is {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_proficiences_begin, slot_troop_proficiences_end),
			# 	(store_sub, l.value, l.slot, slot_troop_proficiences_begin),
			# 	(store_proficiency_level, l.value2, l.troop, l.value),
			# 	(set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} proficience '{reg1}' default is {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_skills_begin, slot_troop_skills_end),
			# 	(store_sub, l.value, l.slot, slot_troop_skills_begin),
			# 	(store_skill_level, l.value2, l.value, l.troop),
			# 	(set_slot, l.troop, l.slot, l.value2),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.value),
			# 		(assign, reg2, l.value2),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} skill '{reg1}' default is {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# #
			# ]),
	#script.lwbr_restore_troop_stats_all
	# ("lwbr_restore_troop_stats_all",[
			# (try_for_range, l.troop, trp.swadian_crossbowman_multiplayer, trp.multiplayer_end),
			# 	(call_script, script.lwbr_restore_troop_stats, l.troop),
			# (try_end),
			# ]),
	#script.lwbr_restore_troop_stats
	# ("lwbr_restore_troop_stats",[
			# (store_script_param_1, l.troop),
			# #
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 	(str_store_troop_name, s1, l.troop),
			# 	(str_store_string, s1, "@Restoring '{s1}' stats"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_stats_begin, slot_troop_stats_end),
			# 	(store_sub, l.value, l.slot, slot_troop_stats_begin),
			# 	(get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, script.lwbr_set_troop_attribute_level, l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_proficiences_begin, slot_troop_proficiences_end),
			# 	(store_sub, l.value, l.slot, slot_troop_proficiences_begin),
			# 	(get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, script.lwbr_set_troop_wpn_proficience_level, l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_for_range, l.slot, slot_troop_skills_begin, slot_troop_skills_end),
			# 	(store_sub, l.value, l.slot, slot_troop_skills_begin),
			# 	(get_slot, l.value2, l.troop, l.slot),
			# 	(call_script, script.lwbr_set_troop_skill_level, l.troop, l.value, l.value2),
			# (try_end),
			# #
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 	(str_store_troop_name, s1, l.troop),
			# 	(str_store_string, s1, "@'{s1}' stats restored"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# #
			# ]),
	#script.lwbr_set_troop_skill_level
	# ("lwbr_set_troop_skill_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.skill, 2),
			# (store_script_param, l.skl_lvl, 3),
			# (try_begin),
			# 	(store_skill_level,l.old_lvl,l.skill,l.troop),
			# 	(neq, l.skl_lvl, l.old_lvl),
			# 	(val_sub, l.skl_lvl, l.old_lvl),
			# 	(troop_raise_skill,l.troop,l.skill,l.skl_lvl),
			# 	(store_skill_level,l.new_lvl,l.skill,l.troop),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.skill),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} skill '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_skills_level
	# ("lwbr_set_troop_all_skills_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.skl_lvl, 2),
			# (try_for_range, l.skill, 0, len(skills)),
			# 	(call_script, script.lwbr_set_troop_skill_level, l.troop, l.skill, l.skl_lvl),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_attribute_level
	# ("lwbr_set_troop_attribute_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.attribute, 2),
			# (store_script_param, l.attribute_lvl, 3),
			# (try_begin),
			# 	(store_attribute_level,l.old_lvl,l.troop,l.attribute),
			# 	(neq, l.attribute_lvl, l.old_lvl),
			# 	(val_sub, l.attribute_lvl, l.old_lvl),
			# 	(troop_raise_attribute_linear,l.troop,l.attribute,l.attribute_lvl),
			# 	(store_attribute_level,l.new_lvl,l.troop,l.attribute),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.attribute),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} attribute '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_attributes_level
	# ("lwbr_set_troop_all_attributes_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.attribute_lvl, 2),
			# (try_for_range, l.attribute, 0, 4),
			# 	(call_script, script.lwbr_set_troop_attribute_level, l.troop, l.attribute, l.attribute_lvl),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_wpn_proficience_level
	# ("lwbr_set_troop_wpn_proficience_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.proficience, 2),
			# (store_script_param, l.proficience_lvl, 3),
			# (store_proficiency_level,l.old_lvl,l.troop,l.proficience),
			# (try_begin),
			# 	(neq, l.proficience_lvl, l.old_lvl),
			# 	(val_sub, l.proficience_lvl, l.old_lvl),
			# 	(troop_raise_proficiency_linear,l.troop,l.proficience,l.proficience_lvl),
			# 	(store_proficiency_level,l.new_lvl,l.troop,l.proficience),
			# 	(try_begin),
			# 		(eq, lwbr.debug_mode, 1),
			# 		(eq, l.troop, trp.swadian_crossbowman_multiplayer),
			# 		(assign, reg1, l.old_lvl),
			# 		(assign, reg2, l.new_lvl),
			# 		(assign, reg3, l.proficience),
			# 		(str_store_troop_name, s2, l.troop),
			# 		(str_store_string, s1, "@DEBUG: Troop {s2} proficience '{reg3}' changed from {reg1} to {reg2}"),
			# 		#(call_script, script.lwbr_send_msg_to_all_players),
			# 		(server_add_message_to_log, s1),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_set_troop_all_wpn_proficiences_level
	# ("lwbr_set_troop_all_wpn_proficiences_level",[
			# (store_script_param, l.troop, 1),
			# (store_script_param, l.proficience_lvl, 2),
			# (try_for_range, l.proficience, 0, 4),
			# 	(call_script, script.lwbr_set_troop_wpn_proficience_level, l.troop, l.proficience, l.proficience_lvl),
			# (try_end),
			# ]),
	#script.lwbr_change_troop_stats_if_needed
	# ("lwbr_change_troop_stats_if_needed",[
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(str_store_string, s1, "@Restoring troop stats"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# (call_script, script.lwbr_restore_troop_stats_all),
			# (try_begin),
			# 	(eq, lwbr.debug_mode, 1),
			# 	(str_store_string, s1, "@Troop stats restored"),
			# 	(server_add_message_to_log, s1),
			# (try_end),
			# (try_begin),
			# 	(eq, "$g_lwbr_new_items", lwbr_new_items__peasant_items),
			# 	(try_for_range, l.troop, multiplayer_troops_begin, multiplayer_troops_end),
			# 		(call_script, script.lwbr_set_troop_all_attributes_level, l.troop, 10),
			# 		(call_script, script.lwbr_set_troop_all_wpn_proficiences_level, l.troop, 50),
			# 		(call_script, script.lwbr_set_troop_all_skills_level, l.troop, 0),
			# 	(try_end),
			# (else_try),
			# 	(eq, "$g_lwbr_new_items", lwbr_new_items__arena_items),
			# 	(try_for_range, l.troop, multiplayer_troops_begin, multiplayer_troops_end),
			# 		(call_script, script.lwbr_set_troop_all_attributes_level, l.troop, 20),
			# 		(call_script, script.lwbr_set_troop_all_wpn_proficiences_level, l.troop, 125),
			# 		(call_script, script.lwbr_set_troop_all_skills_level, l.troop, 5),
			# 	(try_end),
			# (try_end),
			# ]),
	#script.lwbr_get_mt_name_from_slot
	("lwbr_get_mt_name_from_slot",[
			(store_script_param, l.slot, 1),
			(store_add, l.val, l.slot, multiplayer_game_type_deathmatch - lwbr.slot_scene.available_dm),
			(call_script, script.game_get_mission_template_name, l.val),
			]),
]

troops = [
	["lwbr_vars",   "{!}lwbr_vars",   "{!}lwbr_vars",   tf_hero|tf_inactive, 0, 0, 0, [], 0, 0, 0, 0, 0],
	["lwbr_sv_vars","{!}lwbr_sv_vars","{!}lwbr_sv_vars",tf_hero|tf_inactive, 0, 0, 0, [], 0, 0, 0, 0, 0],
]

strings = [ ("sv_msg_1", "This server is running LWBR WarForge v%.3f"%(lwbr.mod_version/1000)) ] + [ ("sv_msg_%d"%i,"Default msg %d"%i) for i in xrange(2, 101)]

injection = {
	'lwbr_inject_escape_presentation_load' : [
		(create_button_overlay, g.lwbr_open_menu_overlay, "@LWBR WarForge menu"),
		(overlay_set_color, g.lwbr_open_menu_overlay, 0xFFFFFF),
		(overlay_set_pos, g.lwbr_open_menu_overlay, 10, 10),
		] + lwbr.debug([
			(create_button_overlay, g.lwbr_debug_overlay, "@LWBR debug"),
			(overlay_set_color, g.lwbr_debug_overlay, 0xFFFFFF),
			(overlay_set_pos, g.lwbr_debug_overlay, 250, 10),
		]) + [#end lwbr.debug
		],
	'lwbr_inject_escape_presentation_state_change' : [
		(else_try),
			(eq, l.object, g.lwbr_open_menu_overlay),
			(presentation_set_duration, 0),
			(start_presentation, prsnt.lwbr_menu),
			] + lwbr.debug([
				(else_try),
					(eq, l.object, g.lwbr_debug_overlay),
				] + foo__debug_vars() + [
			]) + [#end lwbr.debug
		],
	'lwbr_inject_events' : [
		(else_try),
			(assign, l.done, 0),
			(try_begin),
				# (eq, l.event_type, __),
				# (store_script_param, l.par1, 3),
				# ] + lwbr.debug_func("game_receive_network_message", [l.player_no, l.event_type, l.par1]) + [
				# (do_something),
				# (assign, l.done, 1),
			# (else_try),
				(eq, l.event_type, lwbr.multiplayer_event_server_str),
				(player_get_slot, l.par1, l.player_no, lwbr.slot_player.str_sending1),(eq, l.par1, l.par1),
				(player_get_slot, l.par2, l.player_no, lwbr.slot_player.str_sending2),(eq, l.par2, l.par2),
				(player_get_slot, l.par3, l.player_no, lwbr.slot_player.str_sending3),(eq, l.par3, l.par3),
				(player_get_slot, l.par4, l.player_no, lwbr.slot_player.str_sending4),(eq, l.par4, l.par4),
				(player_set_slot, l.player_no, lwbr.slot_player.str_sending1, -1),
				(send_event_to_player, l.player_no, lwbr.multiplayer_event_client,#lwbr.sync_to_cl
					lwbr.cl_event.set_var, lwbr.var.str_sending1, -1, 0, "WarForge"),
				(player_set_slot, l.player_no, lwbr.slot_player.str_sending2, -1),
				(send_event_to_player, l.player_no, lwbr.multiplayer_event_client,#lwbr.sync_to_cl
					lwbr.cl_event.set_var, lwbr.var.str_sending2, -1, 0, "WarForge"),
				(player_set_slot, l.player_no, lwbr.slot_player.str_sending3, -1),
				(send_event_to_player, l.player_no, lwbr.multiplayer_event_client,#lwbr.sync_to_cl
					lwbr.cl_event.set_var, lwbr.var.str_sending3, -1, 0, "WarForge"),
				(player_set_slot, l.player_no, lwbr.slot_player.str_sending4, -1),
				(send_event_to_player, l.player_no, lwbr.multiplayer_event_client,#lwbr.sync_to_cl
					lwbr.cl_event.set_var, lwbr.var.str_sending4, -1, 0, "WarForge"),
				] + lwbr.debug_func("multiplayer_event_server_str", [l.player_no, l.par1, l.par2, l.par3, l.par4]) + [
				] + lwbr.debug([(display_message, "@string is {s0}")]) + [
				(try_begin),
				    (eq, l.par1, lwbr.str_event.set_troop_name),
				    (troop_set_name, l.par2, s0),
				(try_end),
				(assign, l.done, 1),
			(else_try),
				(eq, l.event_type, lwbr.multiplayer_event_client_str),
				(get_lwbr_var, l.par1, lwbr.var.str_receiving1),(eq, l.par1, l.par1),
				(get_lwbr_var, l.par2, lwbr.var.str_receiving2),(eq, l.par2, l.par2),
				(get_lwbr_var, l.par3, lwbr.var.str_receiving3),(eq, l.par3, l.par3),
				(get_lwbr_var, l.par4, lwbr.var.str_receiving4),(eq, l.par4, l.par4),
				(set_lwbr_var, lwbr.var.str_receiving1, -1, lwbr.sync_to_sv),
				(set_lwbr_var, lwbr.var.str_receiving2, -1, lwbr.sync_to_sv),
				(set_lwbr_var, lwbr.var.str_receiving3, -1, lwbr.sync_to_sv),
				(set_lwbr_var, lwbr.var.str_receiving4, -1, lwbr.sync_to_sv),
				] + lwbr.debug_func("multiplayer_event_client_str", [l.player_no, l.par1, l.par2, l.par3, l.par4]) + [
				] + lwbr.debug([(display_message, "@string is {s0}")]) + [
				(try_begin),
				    (eq, l.par1, lwbr.str_event.set_troop_name),
				    (troop_set_name, l.par2, s0),
				(try_end),
				(assign, l.done, 1),
			(else_try),
				(eq, l.event_type, multiplayer_event_set_item_selection),
				(store_script_param, l.par1, 3),
				(store_script_param, l.par2, 4),
				] + lwbr.debug_func("multiplayer_event_set_item_selection", [l.player_no, l.par1, l.par2]) + [
			(else_try),
				] + lwbr.debug_func("game_receive_network_message", [l.player_no, l.event_type]) + [
			(try_end),
			(neq, l.done, 0),
		],
	'lwbr_inject_server_only_events' : [
		(else_try),#set_sv_var
			(eq, l.type, lwbr.sv_event.set_sv_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("sv_event.set_sv_var", [l.slot, l.val]) + [
			(try_begin),
				(try_begin),
					(neg|player_is_admin, l.player_no),
					(str_store_player_username, s0, l.player_no),
					(assign, reg0, l.slot),
					(assign, reg1, l.val),
					(display_message, "@Error: non-admin player {s0} at sv_event.set_sv_var #{reg0} -> {reg1}"),
				(else_try),
					(neg|is_between, l.slot, 0, lwbr.sv_var.count),
					(assign, reg0, l.slot),
					(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at sv_event.set_sv_var"),
				(else_try),
					(set_lwbr_sv_var, l.slot, l.val, lwbr.sync_to_cl),
					(try_begin),#items
						(eq, l.slot, lwbr.sv_var.items),
						(try_begin),
							(multiplayer_is_dedicated_server),
							(call_script, script.lwbr_give_items_to_troops, l.val),
						(try_end),
						(try_for_players, l.pl),#force players to reselect items
							(player_is_active, l.pl),
							(send_event_to_player, l.pl, lwbr.multiplayer_event_client, lwbr.cl_event.clear_items),
							(send_event_to_player, l.pl, multiplayer_event_force_start_team_selection,
								0, 0, 0, 0, "-Server"),
						(try_end),
					(else_try),#msg_cont
						(eq, l.slot, lwbr.sv_var.msg_cnt),
						(get_lwbr_sv_var, l.old_val, lwbr.sv_var.msg_cnt),
						(val_add, l.val, lwbr.msg_troops_begin),
						(val_add, l.old_val, lwbr.msg_troops_begin),
						(try_for_range, l.trp, l.old_val, l.val),
							(str_store_troop_name, s0, l.trp),
							(send_str_to_players, "@{s0}", lwbr.multiplayer_event_client_str,
								lwbr.str_event.set_troop_name, l.trp, 0, "-Server|WarForge|Admin", lwbr.silent),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
		(else_try),#ask_sv_var
			(eq, l.type, lwbr.sv_event.ask_sv_var),
			(store_script_param, l.slot, 4),
			] + lwbr.debug_func("sv_event.ask_sv_var", [l.slot]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.sv_var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at sv_event.ask_sv_var"),
			(else_try),
				(get_lwbr_sv_var, l.val, l.slot),
				(send_event_to_player, l.player_no, lwbr.multiplayer_event_client,
					lwbr.cl_event.return_sv_var, l.slot, l.val, 0, "-Server|WarForge"),
			(try_end),
		(else_try),#return_var
			(eq, l.type, lwbr.sv_event.return_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("sv_event.return_var", [l.slot, l.val]) + [
			(try_begin),
				(eq, l.slot, lwbr.var.version),
				(player_set_slot, l.player_no, lwbr.slot_player.version, l.val),
			(else_try),
				(eq, l.slot, lwbr.var.nxt_scn_info),
				(player_set_slot, l.player_no, lwbr.slot_player.nxt_scn_info, l.val),
			(else_try),
				(is_between, l.slot, lwbr.var.str_sending1, lwbr.var.str_receiving4+1),
				(val_add, l.slot, lwbr.slot_player.str_sending1 - lwbr.var.str_sending1),
				(player_set_slot, l.player_no, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized returned var #{reg0} at sv_event.return_var"),
			(try_end),
		(else_try),#do_action
			(eq, l.type, lwbr.sv_event.do_action),
			(store_script_param, l.action, 4),
			(try_begin),
			# 	(eq, l.action, lwbr.action.taunt.id),
			# 	...
			# (else_try),
				(assign, reg0, l.action),
				(display_message, "@Error: invalid or unrecognized action #{reg0} at sv_event.action"),
			(try_end),
		],
	'lwbr_inject_client_only_events' : [
		(else_try),#set_var
			(eq, l.type, lwbr.cl_event.set_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("cl_event.set_var", [l.slot, l.val]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized var #{reg0} at cl_event.set_var"),
			(else_try),
				(set_lwbr_var, l.slot, l.val),
				# (try_begin),
				# 	(eq, l.slot, lwbr.var.---),
				# 	---
				# (try_end),
			(try_end),
		(else_try),#ask_var
			(eq, l.type, lwbr.cl_event.ask_var),
			(store_script_param, l.slot, 4),
			] + lwbr.debug_func("cl_event.ask_var", [l.slot]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized var #{reg0} at cl_event.ask_var"),
			(else_try),
				(get_lwbr_var, l.val, l.slot),
				(send_event_to_server, lwbr.multiplayer_event_server, lwbr.sv_event.return_var, l.slot, l.val),
			(try_end),
		(else_try),#return_sv_var
			(eq, l.type, lwbr.cl_event.return_sv_var),
			(store_script_param, l.slot, 4),
			(store_script_param, l.val, 5),
			] + lwbr.debug_func("cl_event.return_sv_var", [l.slot,l.val]) + [
			(try_begin),
				(neg|is_between, l.slot, 0, lwbr.sv_var.count),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid or unrecognized sv_var #{reg0} at cl_event.return_sv_var"),
			(else_try),
				(set_lwbr_sv_var, l.slot, l.val),
				(try_begin),
					(eq, l.slot, lwbr.sv_var.items),
					(call_script, script.lwbr_give_items_to_troops, l.val),
				(try_end),
			(try_end),
		(else_try),#set_faction_slot
			(eq, l.type, lwbr.cl_event.set_faction_slot),
			(store_script_param, l.faction, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_faction_slot", [l.faction, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.faction, 0, fac.end),
				(set_slot, l.faction, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid faction #{reg0} at cl_event.set_faction_slot"),
			(try_end),
		(else_try),#set_item_slot
			(eq, l.type, lwbr.cl_event.set_item_slot),
			(store_script_param, l.item, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_item_slot", [l.item, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.item, 0, itm.end),
				(set_slot, l.item, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid item #{reg0} at cl_event.set_item_slot"),
			(try_end),
		(else_try),#set_party_slot
			(eq, l.type, lwbr.cl_event.set_party_slot),
			(store_script_param, l.party, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_party_slot", [l.party, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.party, 0, p.end),
				(set_slot, l.party, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid party #{reg0} at cl_event.set_party_slot"),
			(try_end),
		(else_try),#set_pt_slot
			(eq, l.type, lwbr.cl_event.set_pt_slot),
			(store_script_param, l.pt, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_pt_slot", [l.pt, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.pt, 0, pt.end),
				(set_slot, l.pt, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid pt #{reg0} at cl_event.set_pt_slot"),
			(try_end),
		(else_try),#set_quest_slot
			(eq, l.type, lwbr.cl_event.set_quest_slot),
			(store_script_param, l.quest, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_quest_slot", [l.quest, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.quest, 0, qst.end),
				(set_slot, l.quest, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid quest #{reg0} at cl_event.set_quest_slot"),
			(try_end),
		(else_try),#set_sp_slot
			(eq, l.type, lwbr.cl_event.set_sp_slot),
			(store_script_param, l.sp, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_sp_slot", [l.sp, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.sp, 0, spr.end),
				(set_slot, l.sp, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid sp #{reg0} at cl_event.set_sp_slot"),
			(try_end),
		(else_try),#set_scene_slot
			(eq, l.type, lwbr.cl_event.set_scene_slot),
			(store_script_param, l.scene, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			(try_begin),
				(neg|is_between, l.slot, lwbr.slot_scene.available_dm, lwbr.slot_scene.cur_wt_fgC+1),
				] + lwbr.debug_func("cl_event.set_scene_slot", [l.scene, l.slot, l.slot]) + [
			(try_end),
			(try_begin),
				(is_between, l.scene, 0, scn.end),
				(set_slot, l.scene, l.slot, l.val),
				(try_begin),
					(is_between, l.slot, lwbr.slot_scene.available_dm, lwbr.slot_scene.cur_wt_fgC+1),
					(get_lwbr_var, l.val, lwbr.var.nxt_scn_info),
					(val_max, l.val, l.scene+1),
					(set_lwbr_var, lwbr.var.nxt_scn_info, l.val),
				(try_end),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid scene #{reg0} at cl_event.set_scene_slot"),
			(try_end),
		(else_try),#set_team_slot
			(eq, l.type, lwbr.cl_event.set_team_slot),
			(store_script_param, l.team, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_team_slot", [l.team, l.slot, l.slot]) + [
			# (try_begin),
				# (is_between, l.team, 0, tm.end),
				(team_set_slot, l.team, l.slot, l.val),
			# (else_try),
				# (assign, reg0, l.slot),
				# (display_message, "@Error: invalid team #{reg0} at cl_event.set_team_slot"),
			# (try_end),
		(else_try),#set_agent_slot
			(eq, l.type, lwbr.cl_event.set_agent_slot),
			(store_script_param, l.agent, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_agent_slot", [l.agent, l.slot, l.slot]) + [
			# (try_begin),
				# (is_between, l.agent, 0, ag.end),
				(agent_set_slot, l.agent, l.slot, l.val),
			# (else_try),
				# (assign, reg0, l.slot),
				# (display_message, "@Error: invalid agent #{reg0} at cl_event.set_agent_slot"),
			# (try_end),
		(else_try),#set_troop_slot
			(eq, l.type, lwbr.cl_event.set_troop_slot),
			(store_script_param, l.troop, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_troop_slot", [l.troop, l.slot, l.slot]) + [
			(try_begin),
				(is_between, l.troop, 0, trp.end),
				(set_slot, l.troop, l.slot, l.val),
			(else_try),
				(assign, reg0, l.slot),
				(display_message, "@Error: invalid troop #{reg0} at cl_event.set_troop_slot"),
			(try_end),
		(else_try),#set_player_slot
			(eq, l.type, lwbr.cl_event.set_player_slot),
			(store_script_param, l.player, 4),
			(store_script_param, l.slot, 5),
			(store_script_param, l.val, 6),
			] + lwbr.debug_func("cl_event.set_player_slot", [l.player, l.slot, l.slot]) + [
			# (try_begin),
				# (is_between, l.player, 0, pl.end),
				(player_set_slot, l.player, l.slot, l.val),
			# (else_try),
				# (assign, reg0, l.slot),
				# (display_message, "@Error: invalid player #{reg0} at cl_event.set_player_slot"),
			# (try_end),
		(else_try),#clear_items
			(eq, l.type, lwbr.cl_event.clear_items),
			] + lwbr.debug_func("cl_event.clear_items") + [
			(call_script, script.lwbr_force_change_weapons),
		],
	'lwbr_inject_server_before_mission_start' : [
		(call_script, script.lwbr_server_start, 0),
		(call_script, script.lwbr_player_start, 0),
		(store_current_scene, l.scn),
		(call_script, script.lwbr_set_weather, l.scn),
		],
	'lwbr_inject_on_non_player_spawn' : [],
	'lwbr_inject_on_player_spawn' : [],
	'lwbr_inject_player_join' : [
		] + lwbr.sv_version([
			(str_store_player_username, s0, l.player_no),
			(assign, reg0, l.player_no),
			(player_get_unique_id, reg1, l.player_no),
			(try_begin),
				(player_is_admin, l.player_no),
				(display_message, "@player '{s0}' id #{reg0} uid #{reg1} joined as admin"),
			(else_try),
				(display_message, "@player '{s0}' id #{reg0} uid #{reg1} joined"),
			(try_end),

			(call_script, script.lbwr_init_player, l.player_no),
			(call_script, script.lwbr_ask_player_info, l.player_no),
			(try_begin),
				(filter_player, l.player_no, "-Server"),
				(call_script, script.lwbr_send_player_info, l.player_no),
			(try_end),
		]) + [#end lwbr.sv_version
		],
	'lwbr_inject_once_at_first_frame' : [
		(call_script, script.lwbr_player_start, 1),
		(call_script, script.lwbr_server_start, 1),
		],
	'lwbr_inject_mt_common' : [
		(1, 0, 0, [],[#send weather
				(try_begin),
					(multiplayer_is_server),
					] + lwbr.sv_version([
						(get_max_players, l.mx),
						(val_mod, g.lwbr_wt_send_pl_iter, l.mx),
						(assign, g.lwbr_wt_events_sent, 0),
						# ] + lwbr.debug([
						# 	(assign, reg0, g.lwbr_wt_send_pl_iter),
						# 	(assign, reg1, l.mx),
						# 	(display_message, "@send weather: starting at player {reg0}/{reg1}"),
						# ]) + [#end lwbr.debug
						(try_for_range, g.lwbr_wt_send_pl_iter, g.lwbr_wt_send_pl_iter, l.mx),
							(player_is_active, g.lwbr_wt_send_pl_iter),
							(filter_player, g.lwbr_wt_send_pl_iter, "-Server"),
							] + lwbr.debug([
								(assign, reg0, g.lwbr_wt_send_pl_iter),
								(display_message, "@send weather: sending to player {reg0}/{reg1}"),
							]) + [#end lwbr.debug
							(call_script, script.lwbr_send_weather_info, g.lwbr_wt_send_pl_iter),

							(ge, g.lwbr_wt_events_sent, lwbr.wt_event_limit),
							(assign, l.mx, 0),
						(try_end),
						(val_add, g.lwbr_wt_send_pl_iter, 1),
						# ] + lwbr.debug([
						# 	(assign, reg0, g.lwbr_wt_events_sent),
						# 	(assign, reg1, lwbr.wt_event_limit),
						# 	(display_message, "@send weather: sent {reg0}/{reg1} events"),
						# ]) + [#end lwbr.debug
					]) + [#end lwbr.sv_version
				(try_end),
				]),
		(1, 0, 0, [],[
				(get_lwbr_sv_var, l.cur_tm, lwbr.sv_var.msg_cur_tm),
				(get_lwbr_sv_var, l.max_tm, lwbr.sv_var.msg_cd),
				(get_lwbr_sv_var, l.cur_id, lwbr.sv_var.msg_cur_id),
				(get_lwbr_sv_var, l.max_id, lwbr.sv_var.msg_cnt),
				(gt, l.max_tm, 0),
				(try_begin),
					(ge, l.cur_tm, l.max_tm),
					(assign, l.cur_tm, 0),
					(str_store_troop_name, s0, lwbr.msg_troops_begin+l.cur_id),
					(try_for_players, l.pl),
						(multiplayer_send_message_to_player, l.pl, multiplayer_event_show_server_message, "@{s0}"),
					(try_end),
					(val_add, l.cur_id, 1),
					(val_mod, l.cur_id, l.max_id),
				(try_end),
				(val_add, l.cur_tm, 1),
				(set_lwbr_sv_var, lwbr.sv_var.msg_cur_tm, l.cur_tm),
				(set_lwbr_sv_var, lwbr.sv_var.msg_cur_id, l.cur_id),
				]),
		(ti_on_multiplayer_mission_end, 0, 0, [],[#recalc weather for cur scn
				(try_begin),
					(multiplayer_is_server),
					] + lwbr.sv_version([
						(store_current_scene, l.scn),
						(call_script, script.lwbr_calc_weather, l.scn),
					]) + [#end lwbr.sv_version
				(try_end),
				]),
		(5, 0, 0, [], [
				(try_begin),
					(multiplayer_is_server),
					] + lwbr.sv_version([
						(get_lwbr_sv_var, l.min_version, lwbr.sv_var.min_version),
						(gt, l.min_version, 0),
						(try_for_players, l.pl),
							(player_get_slot, l.version, l.pl,  lwbr.slot_player.version),
							(lt, l.version, l.min_version),
							(try_begin),
								(eq, l.version, lwbr.native),
								(str_store_string, s0, "@Native"),
							(else_try),
								(store_div, reg0, l.version, 1000),
								(store_mod, reg1, l.version, 1000),
								(str_store_string, s1, "@v{reg0}.{reg1}"),
							(try_end),
							(store_mission_timer_a, l.cur_time),
							(player_get_slot, l.join_time, l.pl, slot_player_join_time),
							(store_div, reg0, l.min_version, 1000),
							(store_mod, reg1, l.min_version, 1000),
							(str_store_string, s0, "@This server requires LWBR WarForge v{reg0}.{reg1}, you seem to be using {s0}"),
							(str_store_player_username, s1, l.pl),
							(try_begin),
								(store_add, l.join_time8, l.join_time, 8),
								(gt, l.cur_time, l.join_time8),
								(multiplayer_send_string_to_player, l.pl, multiplayer_event_show_server_message,
									"@{s0}, you will be kicked now"),
								(server_add_message_to_log, "@Player {s1} has been kicked due to not using the required WarForge version({s1}, needs {s0})"),
								(kick_player, l.pl),
							(else_try),
								(store_add, l.join_time4, l.join_time, 4),
								(gt, l.cur_time, l.join_time4),
								(multiplayer_send_string_to_player, l.pl, multiplayer_event_show_server_message,
									"@{s0}, you will be kicked within 5 seconds"),
							(try_end),
						(try_end),
					]) + [#end lwbr.sv_version
				(try_end),
				]),
		],
	'lwbr_inject_mt_deathmatch' : [],
	'lwbr_inject_mt_t_deathmatch' : [],
	'lwbr_inject_mt_headquarters' : [],
	'lwbr_inject_mt_capture_the_flag' : [],
	'lwbr_inject_mt_siege' : [],
	'lwbr_inject_mt_battle' : [],
	'lwbr_inject_mt_fight_and_destroy' : [],
	'lwbr_inject_mt_coop' : [],
	'lwbr_inject_mt_duel' : [],
	'lwbr_inject_buy_equipment' : [
		(get_lwbr_sv_var, l.packs, lwbr.sv_var.items),
		] + lwbr.debug_func("lwbr_inject_buy_equipment", [l.player_no, l.packs]) + [
		# try_begin # lwbr_buy_peasant_items
			(store_and, l.check, l.packs, lwbr.packages["Peasant"]),
			(neq, l.check, 0),
			] + lwbr.debug_func("lwbr_buy_peasant_items") + [
			(try_begin),
				(player_get_troop_id, l.trp, l.player_no),
				(gt, l.trp, 0),
				(troop_get_type_counts,l.cnt_horses,
									   l.cnt_1h,l.cnt_2h,l.cnt_pole,
									   l.cnt_arrow,l.cnt_bolt,
									   l.cnt_shield,
									   l.cnt_bow,l.cnt_xbow,l.cnt_th,
									   l.rest,
									   l.cnt_helm,l.cnt_armor,l.cnt_boots,l.cnt_gloves,
									   l.rest,l.rest,l.rest,l.rest,l.rest,
									   l.trp),
				(try_chance,80),#80%
					] + lwbr.debug_func("bought_head_armor", [l.player_no, l.cnt_helm]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_head_armor,	l.cnt_helm,  ek_head,   l.player_no),
				(try_end),
				(try_chance,90),#90%
					] + lwbr.debug_func("bought_body_armor", [l.player_no, l.cnt_armor]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_body_armor,	l.cnt_armor, ek_body,   l.player_no),
				(try_end),
				(try_chance,88),#88%
					] + lwbr.debug_func("bought_foot_armor", [l.player_no, l.cnt_boots]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_foot_armor,	l.cnt_boots, ek_foot,   l.player_no),
				(try_end),
				(try_chance,25),#25%
					] + lwbr.debug_func("bought_hand_armor", [l.player_no, l.cnt_gloves]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_hand_armor,	l.cnt_gloves,ek_gloves, l.player_no),
				(try_end),
				(try_chance,15),#15%
					] + lwbr.debug_func("bought_horse", [l.player_no, l.cnt_horses]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_horse,			l.cnt_horses,ek_horse,  l.player_no),
				(try_end),
				(try_chance,1,3),#1/3
					] + lwbr.debug_func("bought_1h", [l.player_no, l.cnt_1h]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_one_handed_wpn,l.cnt_1h,    ek_item_0, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield,		l.cnt_shield,ek_item_1, l.player_no),
				# (else_try_chance),
				# 	] + lwbr.debug_func("bought_2h", [l.player_no, l.cnt_2h]) + [
				# 	(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_two_handed_wpn,l.cnt_2h,    ek_item_0, l.player_no),
				(else_try),#2/3
					] + lwbr.debug_func("bought_pole", [l.player_no, l.cnt_pole]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_polearm,		l.cnt_pole,  ek_item_0, l.player_no),
				(try_end),
				(try_chance,90),#90%
					] + lwbr.debug_func("bought_thrown", [l.player_no, l.cnt_th]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_thrown,		l.cnt_th,    ek_item_2, l.player_no),
				(else_try_chance),#5%
					] + lwbr.debug_func("bought_bow", [l.player_no, l.cnt_bow]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_bow,			l.cnt_bow,   ek_item_2, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_arrows,		l.cnt_arrow, ek_item_3, l.player_no),
				(else_try),#5%
					] + lwbr.debug_func("bought_xbow", [l.player_no, l.cnt_xbow]) + [
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_crossbow,		l.cnt_xbow,  ek_item_2, l.player_no),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_bolts,			l.cnt_bolt,  ek_item_3, l.player_no),
				(try_end),
			(try_end),
		(else_try),# lwbr_buy_arena_items
			(store_and, l.check, l.packs, lwbr.packages["Arena"]),
			(neq, l.check, 0),
			] + lwbr.debug_func("lwbr_buy_arena_items") + [
			(try_begin),
				(player_get_troop_id, l.trp, l.player_no),
				(gt, l.trp, 0),
				(troop_get_type_counts,l.cnt_horses,
									   l.cnt_1h,l.cnt_2h,l.cnt_pole,
									   l.cnt_arrow,l.cnt_bolt,
									   l.cnt_shield,
									   l.cnt_bow,l.cnt_xbow,l.cnt_th,
									   l.rest,
									   l.cnt_helm,l.cnt_armor,l.cnt_boots,l.cnt_gloves,
									   l.rest,l.rest,l.rest,l.rest,l.rest,
									   l.trp),

				#add armor
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_head_armor, l.cnt_helm,  ek_head,  l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_body_armor, l.cnt_armor, ek_body,  l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_hand_armor, l.cnt_gloves,ek_gloves,l.player_no),
				(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_foot_armor, l.cnt_boots, ek_foot,  l.player_no),

				(try_begin),#horse
					(player_get_slot, l.horse, l.player_no, slot_player_selected_item_indices_begin + 8),#horse slot
					(ge, l.horse, 0),
					] + lwbr.debug_func("picked_mounted_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_horse, itm.practice_horse),
				(try_end),

				(player_get_slot, l.wpn, l.player_no, slot_player_selected_item_indices_begin),#1st wpn slot
				(assign, l.itm_type, -1),
				(assign, l.itm_class, -1),
				(try_begin),
					(ge, l.wpn, 0),
					(item_get_type, l.itm_type, l.wpn),
					(get_slot, l.itm_class, l.wpn, slot_item_multiplayer_item_class),
				(try_end),

				(try_begin),#lance/shield/dagger
					(eq, l.wpn, itm.practice_lance),
					] + lwbr.debug_func("picked_lancer_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_lance),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#staff/throwing dagger
					(this_or_next|eq, l.wpn, itm.practice_staff),
					(eq, l.wpn, itm.practice_throwing_daggers),
					] + lwbr.debug_func("picked_staff_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_staff),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_throwing_daggers),
				(else_try),#javelin/shield/dagger
					(eq, l.wpn, itm.practice_javelin),
					] + lwbr.debug_func("picked_javelin_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_javelin),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_dagger),
				(else_try),#bow/dagger
					(this_or_next|eq, l.itm_type, itp_type_bow),
					(eq, l.itm_type, itp_type_arrows),
					] + lwbr.debug_func("picked_bow_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_bow),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_arrows),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#xbow/dagger
					(this_or_next|eq, l.itm_type, itp_type_crossbow),
					(eq, l.itm_type, itp_type_bolts),
					] + lwbr.debug_func("picked_xbow_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_crossbow),
					(player_add_spawn_item, l.player_no, ek_item_1, itm.practice_bolts),
					(player_add_spawn_item, l.player_no, ek_item_2, itm.practice_dagger),
				(else_try),#2h
					(eq, l.itm_type, itp_type_two_handed_wpn),
					] + lwbr.debug_func("picked_2h_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.heavy_practice_sword),
				(else_try),#1h axe/shield
					(eq, l.itm_type, itp_type_one_handed_wpn),
					(eq, l.itm_class, multi_item_class_type_axe),
					] + lwbr.debug_func("picked_axe_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_axe),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
				(else_try),#1h sword/shield -> default
					# (this_or_next|eq, l.itm_type, itp_type_one_handed_wpn),
					# (eq, l.type, itp_type_shield),
					] + lwbr.debug_func("picked_1h_kit", [l.player_no]) + [
					(player_add_spawn_item, l.player_no, ek_item_0, itm.practice_sword),
					(call_script, script.lwbr_add_rnd_itm_of_type, l.trp, itp_type_shield, l.cnt_shield, ek_item_1, l.player_no),
				(try_end),
			(try_end),
		(else_try),# normal
		] + lwbr.debug_func("lwbr_buy_normal_items") + [
		] + lwbr.debug([
			(try_for_range, l.slot, slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
				(player_get_slot, l.itm, l.player_no, l.slot),
				(ge, l.itm, 0),
				(str_store_item_name, s0, l.itm),
				(display_message, "@buying item '{s0}'"),
			(try_end),
		]) + [
		# try_end
		],
}



#LWBR WarForge 2.0 --- BEGIN
#LWBR WarForge 2.0 --- END

